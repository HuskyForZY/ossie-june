// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "cf.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
CF::DataType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(id,0);
  (const ::CORBA::Any&) value >>= _n;

}

void
CF::DataType::operator<<= (cdrStream &_n)
{
  id = _n.unmarshalString(0);
  (::CORBA::Any&)value <<= _n;

}

::CORBA::Exception::insertExceptionToAny CF::InvalidProfile::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::InvalidProfile::insertToAnyFnNCP = 0;

CF::InvalidProfile::InvalidProfile(const CF::InvalidProfile& _s) : ::CORBA::UserException(_s)
{
  
}



CF::InvalidProfile& CF::InvalidProfile::operator=(const CF::InvalidProfile& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::InvalidProfile::~InvalidProfile() {}

void CF::InvalidProfile::_raise() const { throw *this; }

const char* CF::InvalidProfile::_PD_repoId = "IDL:CF/InvalidProfile:1.0";
const char* CF::InvalidProfile::_PD_typeId = "Exception/UserException/CF::InvalidProfile";

CF::InvalidProfile* CF::InvalidProfile::_downcast(::CORBA::Exception* _e) {
  return (InvalidProfile*) _NP_is_a(_e, _PD_typeId);
}

const CF::InvalidProfile* CF::InvalidProfile::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidProfile*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::InvalidProfile::_NP_duplicate() const {
  return new InvalidProfile(*this);
}

const char* CF::InvalidProfile::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::InvalidProfile::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/InvalidProfile:1.0");
  return _PD_repoId;
}
 
void CF::InvalidProfile::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::InvalidObjectReference::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::InvalidObjectReference::insertToAnyFnNCP = 0;

CF::InvalidObjectReference::InvalidObjectReference(const CF::InvalidObjectReference& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;

}

CF::InvalidObjectReference::InvalidObjectReference(const char* _msg)
{
  pd_insertToAnyFn    = CF::InvalidObjectReference::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::InvalidObjectReference::insertToAnyFnNCP;
  msg = _msg;

}



CF::InvalidObjectReference& CF::InvalidObjectReference::operator=(const CF::InvalidObjectReference& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;

  return *this;
}

CF::InvalidObjectReference::~InvalidObjectReference() {}

void CF::InvalidObjectReference::_raise() const { throw *this; }

const char* CF::InvalidObjectReference::_PD_repoId = "IDL:CF/InvalidObjectReference:1.0";
const char* CF::InvalidObjectReference::_PD_typeId = "Exception/UserException/CF::InvalidObjectReference";

CF::InvalidObjectReference* CF::InvalidObjectReference::_downcast(::CORBA::Exception* _e) {
  return (InvalidObjectReference*) _NP_is_a(_e, _PD_typeId);
}

const CF::InvalidObjectReference* CF::InvalidObjectReference::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidObjectReference*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::InvalidObjectReference::_NP_duplicate() const {
  return new InvalidObjectReference(*this);
}

const char* CF::InvalidObjectReference::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::InvalidObjectReference::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/InvalidObjectReference:1.0");
  return _PD_repoId;
}
 
void CF::InvalidObjectReference::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::InvalidObjectReference::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);

}

void
CF::InvalidObjectReference::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::UnknownProperties::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::UnknownProperties::insertToAnyFnNCP = 0;

CF::UnknownProperties::UnknownProperties(const CF::UnknownProperties& _s) : ::CORBA::UserException(_s)
{
  invalidProperties = _s.invalidProperties;

}

CF::UnknownProperties::UnknownProperties(const Properties _invalidProperties)
{
  pd_insertToAnyFn    = CF::UnknownProperties::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::UnknownProperties::insertToAnyFnNCP;
  invalidProperties = _invalidProperties;

}



CF::UnknownProperties& CF::UnknownProperties::operator=(const CF::UnknownProperties& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidProperties = _s.invalidProperties;

  return *this;
}

CF::UnknownProperties::~UnknownProperties() {}

void CF::UnknownProperties::_raise() const { throw *this; }

const char* CF::UnknownProperties::_PD_repoId = "IDL:CF/UnknownProperties:1.0";
const char* CF::UnknownProperties::_PD_typeId = "Exception/UserException/CF::UnknownProperties";

CF::UnknownProperties* CF::UnknownProperties::_downcast(::CORBA::Exception* _e) {
  return (UnknownProperties*) _NP_is_a(_e, _PD_typeId);
}

const CF::UnknownProperties* CF::UnknownProperties::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownProperties*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::UnknownProperties::_NP_duplicate() const {
  return new UnknownProperties(*this);
}

const char* CF::UnknownProperties::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::UnknownProperties::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/UnknownProperties:1.0");
  return _PD_repoId;
}
 
void CF::UnknownProperties::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::UnknownProperties::operator>>= (cdrStream& _n) const
{
  (const Properties&) invalidProperties >>= _n;

}

void
CF::UnknownProperties::operator<<= (cdrStream& _n)
{
  (Properties&)invalidProperties <<= _n;

}

void
CF::DeviceAssignmentType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(componentId,0);
  _n.marshalString(assignedDeviceId,0);

}

void
CF::DeviceAssignmentType::operator<<= (cdrStream &_n)
{
  componentId = _n.unmarshalString(0);
  assignedDeviceId = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::InvalidFileName::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::InvalidFileName::insertToAnyFnNCP = 0;

CF::InvalidFileName::InvalidFileName(const CF::InvalidFileName& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::InvalidFileName::InvalidFileName(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::InvalidFileName::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::InvalidFileName::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::InvalidFileName& CF::InvalidFileName::operator=(const CF::InvalidFileName& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::InvalidFileName::~InvalidFileName() {}

void CF::InvalidFileName::_raise() const { throw *this; }

const char* CF::InvalidFileName::_PD_repoId = "IDL:CF/InvalidFileName:1.0";
const char* CF::InvalidFileName::_PD_typeId = "Exception/UserException/CF::InvalidFileName";

CF::InvalidFileName* CF::InvalidFileName::_downcast(::CORBA::Exception* _e) {
  return (InvalidFileName*) _NP_is_a(_e, _PD_typeId);
}

const CF::InvalidFileName* CF::InvalidFileName::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidFileName*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::InvalidFileName::_NP_duplicate() const {
  return new InvalidFileName(*this);
}

const char* CF::InvalidFileName::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::InvalidFileName::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/InvalidFileName:1.0");
  return _PD_repoId;
}
 
void CF::InvalidFileName::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::InvalidFileName::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::InvalidFileName::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::FileException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::FileException::insertToAnyFnNCP = 0;

CF::FileException::FileException(const CF::FileException& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::FileException::FileException(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::FileException::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::FileException::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::FileException& CF::FileException::operator=(const CF::FileException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::FileException::~FileException() {}

void CF::FileException::_raise() const { throw *this; }

const char* CF::FileException::_PD_repoId = "IDL:CF/FileException:1.0";
const char* CF::FileException::_PD_typeId = "Exception/UserException/CF::FileException";

CF::FileException* CF::FileException::_downcast(::CORBA::Exception* _e) {
  return (FileException*) _NP_is_a(_e, _PD_typeId);
}

const CF::FileException* CF::FileException::_downcast(const ::CORBA::Exception* _e) {
  return (const FileException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::FileException::_NP_duplicate() const {
  return new FileException(*this);
}

const char* CF::FileException::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::FileException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/FileException:1.0");
  return _PD_repoId;
}
 
void CF::FileException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::FileException::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::FileException::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

CF::AggregateDevice_ptr CF::AggregateDevice_Helper::_nil() {
  return ::CF::AggregateDevice::_nil();
}

::CORBA::Boolean CF::AggregateDevice_Helper::is_nil(::CF::AggregateDevice_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::AggregateDevice_Helper::release(::CF::AggregateDevice_ptr p) {
  ::CORBA::release(p);
}

void CF::AggregateDevice_Helper::marshalObjRef(::CF::AggregateDevice_ptr obj, cdrStream& s) {
  ::CF::AggregateDevice::_marshalObjRef(obj, s);
}

CF::AggregateDevice_ptr CF::AggregateDevice_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::AggregateDevice::_unmarshalObjRef(s);
}

void CF::AggregateDevice_Helper::duplicate(::CF::AggregateDevice_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::AggregateDevice_ptr
CF::AggregateDevice::_duplicate(::CF::AggregateDevice_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::AggregateDevice_ptr
CF::AggregateDevice::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::AggregateDevice_ptr
CF::AggregateDevice::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::AggregateDevice_ptr
CF::AggregateDevice::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_AggregateDevice _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_AggregateDevice* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_AggregateDevice;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::AggregateDevice::_PD_repoId = "IDL:CF/AggregateDevice:1.0";


CF::_objref_AggregateDevice::~_objref_AggregateDevice() {
  
}


CF::_objref_AggregateDevice::_objref_AggregateDevice(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::AggregateDevice::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_AggregateDevice::_ptrToObjRef(const char* id)
{
  if( id == ::CF::AggregateDevice::_PD_repoId )
    return (::CF::AggregateDevice_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::AggregateDevice::_PD_repoId) )
    return (::CF::AggregateDevice_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mDevice_e_cCF_mInvalidObjectReference
class _0RL_cd_23ebd682546aacbd_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Device_var arg_0_;
  CF::Device_ptr arg_0;
};

void _0RL_cd_23ebd682546aacbd_00000000::marshalArguments(cdrStream& _n)
{
  CF::Device_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_23ebd682546aacbd_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CF::Device_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_00000000::_user_exns[] = {
  CF::InvalidObjectReference::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_00000000* tcd = (_0RL_cd_23ebd682546aacbd_00000000*)cd;
  CF::_impl_AggregateDevice* impl = (CF::_impl_AggregateDevice*) svnt->_ptrToInterface(CF::AggregateDevice::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->addDevice(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->addDevice(tcd->arg_0);
  else {
    try {
      impl->addDevice(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_AggregateDevice::addDevice(Device_ptr associatedDevice)
{
  _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_10000000, "addDevice", 10);
  _call_desc.arg_0 = associatedDevice;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_00000000* tcd = (_0RL_cd_23ebd682546aacbd_00000000*)cd;
  CF::_impl_AggregateDevice* impl = (CF::_impl_AggregateDevice*) svnt->_ptrToInterface(CF::AggregateDevice::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->removeDevice(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->removeDevice(tcd->arg_0);
  else {
    try {
      impl->removeDevice(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_AggregateDevice::removeDevice(Device_ptr associatedDevice)
{
  _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_20000000, "removeDevice", 13);
  _call_desc.arg_0 = associatedDevice;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDeviceSequence
class _0RL_cd_23ebd682546aacbd_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_30000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::DeviceSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_30000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::DeviceSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_30000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::DeviceSequence;
  (CF::DeviceSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_30000000* tcd = (_0RL_cd_23ebd682546aacbd_30000000*)cd;
  CF::_impl_AggregateDevice* impl = (CF::_impl_AggregateDevice*) svnt->_ptrToInterface(CF::AggregateDevice::_PD_repoId);
  tcd->result = impl->devices();


}

CF::DeviceSequence* CF::_objref_AggregateDevice::devices()
{
  _0RL_cd_23ebd682546aacbd_30000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_40000000, "_get_devices", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_AggregateDevice::~_pof_AggregateDevice() {}


omniObjRef*
CF::_pof_AggregateDevice::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_AggregateDevice(ior, id);
}


::CORBA::Boolean
CF::_pof_AggregateDevice::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::AggregateDevice::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_AggregateDevice _the_pof_CF_mAggregateDevice;

CF::_impl_AggregateDevice::~_impl_AggregateDevice() {}


::CORBA::Boolean
CF::_impl_AggregateDevice::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "addDevice") ) {

    _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_10000000, "addDevice", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeDevice") ) {

    _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_20000000, "removeDevice", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_devices") ) {

    _0RL_cd_23ebd682546aacbd_30000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_40000000, "_get_devices", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_AggregateDevice::_ptrToInterface(const char* id)
{
  if( id == ::CF::AggregateDevice::_PD_repoId )
    return (::CF::_impl_AggregateDevice*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::AggregateDevice::_PD_repoId) )
    return (::CF::_impl_AggregateDevice*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_AggregateDevice::_mostDerivedRepoId()
{
  return ::CF::AggregateDevice::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::FileSystem::UnknownFileSystemProperties::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::FileSystem::UnknownFileSystemProperties::insertToAnyFnNCP = 0;

CF::FileSystem::UnknownFileSystemProperties::UnknownFileSystemProperties(const CF::FileSystem::UnknownFileSystemProperties& _s) : ::CORBA::UserException(_s)
{
  invalidProperties = _s.invalidProperties;

}

CF::FileSystem::UnknownFileSystemProperties::UnknownFileSystemProperties(const Properties _invalidProperties)
{
  pd_insertToAnyFn    = CF::FileSystem::UnknownFileSystemProperties::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::FileSystem::UnknownFileSystemProperties::insertToAnyFnNCP;
  invalidProperties = _invalidProperties;

}



CF::FileSystem::UnknownFileSystemProperties& CF::FileSystem::UnknownFileSystemProperties::operator=(const CF::FileSystem::UnknownFileSystemProperties& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidProperties = _s.invalidProperties;

  return *this;
}

CF::FileSystem::UnknownFileSystemProperties::~UnknownFileSystemProperties() {}

void CF::FileSystem::UnknownFileSystemProperties::_raise() const { throw *this; }

const char* CF::FileSystem::UnknownFileSystemProperties::_PD_repoId = "IDL:CF/FileSystem/UnknownFileSystemProperties:1.0";
const char* CF::FileSystem::UnknownFileSystemProperties::_PD_typeId = "Exception/UserException/CF::FileSystem::UnknownFileSystemProperties";

CF::FileSystem::UnknownFileSystemProperties* CF::FileSystem::UnknownFileSystemProperties::_downcast(::CORBA::Exception* _e) {
  return (UnknownFileSystemProperties*) _NP_is_a(_e, _PD_typeId);
}

const CF::FileSystem::UnknownFileSystemProperties* CF::FileSystem::UnknownFileSystemProperties::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownFileSystemProperties*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::FileSystem::UnknownFileSystemProperties::_NP_duplicate() const {
  return new UnknownFileSystemProperties(*this);
}

const char* CF::FileSystem::UnknownFileSystemProperties::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::FileSystem::UnknownFileSystemProperties::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/FileSystem/UnknownFileSystemProperties:1.0");
  return _PD_repoId;
}
 
void CF::FileSystem::UnknownFileSystemProperties::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::FileSystem::UnknownFileSystemProperties::operator>>= (cdrStream& _n) const
{
  (const Properties&) invalidProperties >>= _n;

}

void
CF::FileSystem::UnknownFileSystemProperties::operator<<= (cdrStream& _n)
{
  (Properties&)invalidProperties <<= _n;

}

const char * CF::FileSystem::SIZE = "SIZE";

const char * CF::FileSystem::AVAILABLE_SIZE = "AVAILABLE_SPACE";

void
CF::FileSystem::FileInformationType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  kind >>= _n;
  size >>= _n;
  (const Properties&) fileProperties >>= _n;

}

void
CF::FileSystem::FileInformationType::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (FileType&)kind <<= _n;
  (::CORBA::ULongLong&)size <<= _n;
  (Properties&)fileProperties <<= _n;

}

const char * CF::FileSystem::CREATED_TIME_ID = "CREATED_TIME";

const char * CF::FileSystem::MODIFIED_TIME_ID = "MODIFIED_TIME";

const char * CF::FileSystem::LAST_ACCESS_TIME_ID = "LAST_ACCESS_TIME";

CF::FileSystem_ptr CF::FileSystem_Helper::_nil() {
  return ::CF::FileSystem::_nil();
}

::CORBA::Boolean CF::FileSystem_Helper::is_nil(::CF::FileSystem_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::FileSystem_Helper::release(::CF::FileSystem_ptr p) {
  ::CORBA::release(p);
}

void CF::FileSystem_Helper::marshalObjRef(::CF::FileSystem_ptr obj, cdrStream& s) {
  ::CF::FileSystem::_marshalObjRef(obj, s);
}

CF::FileSystem_ptr CF::FileSystem_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::FileSystem::_unmarshalObjRef(s);
}

void CF::FileSystem_Helper::duplicate(::CF::FileSystem_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::FileSystem_ptr
CF::FileSystem::_duplicate(::CF::FileSystem_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::FileSystem_ptr
CF::FileSystem::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::FileSystem_ptr
CF::FileSystem::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::FileSystem_ptr
CF::FileSystem::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FileSystem _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FileSystem* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_FileSystem;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::FileSystem::_PD_repoId = "IDL:CF/FileSystem:1.0";


CF::_objref_FileSystem::~_objref_FileSystem() {
  
}


CF::_objref_FileSystem::_objref_FileSystem(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::FileSystem::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_FileSystem::_ptrToObjRef(const char* id)
{
  if( id == ::CF::FileSystem::_PD_repoId )
    return (::CF::FileSystem_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::FileSystem::_PD_repoId) )
    return (::CF::FileSystem_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mFileException_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_50000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_50000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_50000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_50000000::_user_exns[] = {
  CF::FileException::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_50000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_50000000* tcd = (_0RL_cd_23ebd682546aacbd_50000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->remove(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->remove(tcd->arg_0);
  else {
    try {
      impl->remove(tcd->arg_0);
    }
    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileSystem::remove(const char* fileName)
{
  _0RL_cd_23ebd682546aacbd_50000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_60000000, "remove", 7);
  _call_desc.arg_0 = fileName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_e_cCF_mFileException_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_23ebd682546aacbd_70000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_23ebd682546aacbd_70000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_70000000::_user_exns[] = {
  CF::FileException::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_70000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_70000000* tcd = (_0RL_cd_23ebd682546aacbd_70000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->copy(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->copy(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->copy(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileSystem::copy(const char* sourceFileName, const char* destinationFileName)
{
  _0RL_cd_23ebd682546aacbd_70000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_80000000, "copy", 5);
  _call_desc.arg_0 = sourceFileName;
  _call_desc.arg_1 = destinationFileName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_23ebd682546aacbd_90000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_23ebd682546aacbd_90000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_23ebd682546aacbd_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_23ebd682546aacbd_90000000::_user_exns[] = {
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_90000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_90000000* tcd = (_0RL_cd_23ebd682546aacbd_90000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->exists(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->exists(tcd->arg_0);
  else {
    try {
      tcd->result = impl->exists(tcd->arg_0);
    }
    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CF::_objref_FileSystem::exists(const char* fileName)
{
  _0RL_cd_23ebd682546aacbd_90000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a0000000, "exists", 7);
  _call_desc.arg_0 = fileName;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mFileSystem_mFileInformationSequence_i_cstring_e_cCF_mFileException_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CF::FileSystem::FileInformationSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_b0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_23ebd682546aacbd_b0000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::FileSystem::FileInformationSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::FileSystem::FileInformationSequence;
  (CF::FileSystem::FileInformationSequence&)result <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_b0000000::_user_exns[] = {
  CF::FileException::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_b0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_b0000000* tcd = (_0RL_cd_23ebd682546aacbd_b0000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->list(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->list(tcd->arg_0);
  else {
    try {
      tcd->result = impl->list(tcd->arg_0);
    }
    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CF::FileSystem::FileInformationSequence* CF::_objref_FileSystem::list(const char* pattern)
{
  _0RL_cd_23ebd682546aacbd_b0000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_c0000000, "list", 5);
  _call_desc.arg_0 = pattern;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mFile_i_cstring_e_cCF_mFileException_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CF::File_var result;
};

void _0RL_cd_23ebd682546aacbd_d0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_23ebd682546aacbd_d0000000::marshalReturnedValues(cdrStream& _n)
{
  CF::File_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::File_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_23ebd682546aacbd_d0000000::_user_exns[] = {
  CF::FileException::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_d0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_d0000000* tcd = (_0RL_cd_23ebd682546aacbd_d0000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->create(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->create(tcd->arg_0);
  else {
    try {
      tcd->result = impl->create(tcd->arg_0);
    }
    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CF::File_ptr CF::_objref_FileSystem::create(const char* fileName)
{
  _0RL_cd_23ebd682546aacbd_d0000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e0000000, "create", 7);
  _call_desc.arg_0 = fileName;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mFile_i_cstring_i_cboolean_e_cCF_mFileException_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean arg_1;
  CF::File_var result;
};

void _0RL_cd_23ebd682546aacbd_f0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_23ebd682546aacbd_f0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_23ebd682546aacbd_f0000000::marshalReturnedValues(cdrStream& _n)
{
  CF::File_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::File_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_23ebd682546aacbd_f0000000::_user_exns[] = {
  CF::FileException::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_f0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f0000000* tcd = (_0RL_cd_23ebd682546aacbd_f0000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->open(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->open(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->open(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CF::File_ptr CF::_objref_FileSystem::open(const char* fileName, ::CORBA::Boolean read_Only)
{
  _0RL_cd_23ebd682546aacbd_f0000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_01000000, "open", 5);
  _call_desc.arg_0 = fileName;
  _call_desc.arg_1 = read_Only;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_50000000* tcd = (_0RL_cd_23ebd682546aacbd_50000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->mkdir(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->mkdir(tcd->arg_0);
  else {
    try {
      impl->mkdir(tcd->arg_0);
    }
    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileSystem::mkdir(const char* directoryName)
{
  _0RL_cd_23ebd682546aacbd_50000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_11000000, "mkdir", 6);
  _call_desc.arg_0 = directoryName;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_50000000* tcd = (_0RL_cd_23ebd682546aacbd_50000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->rmdir(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->rmdir(tcd->arg_0);
  else {
    try {
      impl->rmdir(tcd->arg_0);
    }
    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileSystem::rmdir(const char* directoryName)
{
  _0RL_cd_23ebd682546aacbd_50000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_21000000, "rmdir", 6);
  _call_desc.arg_0 = directoryName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_n_cCF_mProperties_e_cCF_mFileSystem_mUnknownFileSystemProperties
class _0RL_cd_23ebd682546aacbd_31000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_31000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Properties_var arg_0_;
  CF::Properties* arg_0;
};

void _0RL_cd_23ebd682546aacbd_31000000::marshalArguments(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_31000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CF::Properties;
  (CF::Properties&)arg_0_ <<= _n;
  arg_0 = &arg_0_.inout();

}

void _0RL_cd_23ebd682546aacbd_31000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_31000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::Properties&)*arg_0 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_31000000::_user_exns[] = {
  CF::FileSystem::UnknownFileSystemProperties::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_31000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileSystem::UnknownFileSystemProperties::_PD_repoId) ) {
    CF::FileSystem::UnknownFileSystemProperties _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_41000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_31000000* tcd = (_0RL_cd_23ebd682546aacbd_31000000*)cd;
  CF::_impl_FileSystem* impl = (CF::_impl_FileSystem*) svnt->_ptrToInterface(CF::FileSystem::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->query(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->query(*tcd->arg_0);
  else {
    try {
      impl->query(*tcd->arg_0);
    }
    catch(CF::FileSystem::UnknownFileSystemProperties& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileSystem::query(Properties& fileSystemProperties)
{
  _0RL_cd_23ebd682546aacbd_31000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_41000000, "query", 6);
  _call_desc.arg_0 = &(Properties&) fileSystemProperties;

  _invoke(_call_desc);



}
CF::_pof_FileSystem::~_pof_FileSystem() {}


omniObjRef*
CF::_pof_FileSystem::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_FileSystem(ior, id);
}


::CORBA::Boolean
CF::_pof_FileSystem::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::FileSystem::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_FileSystem _the_pof_CF_mFileSystem;

CF::_impl_FileSystem::~_impl_FileSystem() {}


::CORBA::Boolean
CF::_impl_FileSystem::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "remove") ) {

    _0RL_cd_23ebd682546aacbd_50000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_60000000, "remove", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "copy") ) {

    _0RL_cd_23ebd682546aacbd_70000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_80000000, "copy", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "exists") ) {

    _0RL_cd_23ebd682546aacbd_90000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a0000000, "exists", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "list") ) {

    _0RL_cd_23ebd682546aacbd_b0000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_c0000000, "list", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "create") ) {

    _0RL_cd_23ebd682546aacbd_d0000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e0000000, "create", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "open") ) {

    _0RL_cd_23ebd682546aacbd_f0000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_01000000, "open", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "mkdir") ) {

    _0RL_cd_23ebd682546aacbd_50000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_11000000, "mkdir", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "rmdir") ) {

    _0RL_cd_23ebd682546aacbd_50000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_21000000, "rmdir", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "query") ) {

    _0RL_cd_23ebd682546aacbd_31000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_41000000, "query", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_FileSystem::_ptrToInterface(const char* id)
{
  if( id == ::CF::FileSystem::_PD_repoId )
    return (::CF::_impl_FileSystem*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::FileSystem::_PD_repoId) )
    return (::CF::_impl_FileSystem*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_FileSystem::_mostDerivedRepoId()
{
  return ::CF::FileSystem::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::File::IOException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::File::IOException::insertToAnyFnNCP = 0;

CF::File::IOException::IOException(const CF::File::IOException& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::File::IOException::IOException(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::File::IOException::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::File::IOException::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::File::IOException& CF::File::IOException::operator=(const CF::File::IOException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::File::IOException::~IOException() {}

void CF::File::IOException::_raise() const { throw *this; }

const char* CF::File::IOException::_PD_repoId = "IDL:CF/File/IOException:1.0";
const char* CF::File::IOException::_PD_typeId = "Exception/UserException/CF::File::IOException";

CF::File::IOException* CF::File::IOException::_downcast(::CORBA::Exception* _e) {
  return (IOException*) _NP_is_a(_e, _PD_typeId);
}

const CF::File::IOException* CF::File::IOException::_downcast(const ::CORBA::Exception* _e) {
  return (const IOException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::File::IOException::_NP_duplicate() const {
  return new IOException(*this);
}

const char* CF::File::IOException::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::File::IOException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/File/IOException:1.0");
  return _PD_repoId;
}
 
void CF::File::IOException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::File::IOException::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::File::IOException::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::File::InvalidFilePointer::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::File::InvalidFilePointer::insertToAnyFnNCP = 0;

CF::File::InvalidFilePointer::InvalidFilePointer(const CF::File::InvalidFilePointer& _s) : ::CORBA::UserException(_s)
{
  
}



CF::File::InvalidFilePointer& CF::File::InvalidFilePointer::operator=(const CF::File::InvalidFilePointer& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::File::InvalidFilePointer::~InvalidFilePointer() {}

void CF::File::InvalidFilePointer::_raise() const { throw *this; }

const char* CF::File::InvalidFilePointer::_PD_repoId = "IDL:CF/File/InvalidFilePointer:1.0";
const char* CF::File::InvalidFilePointer::_PD_typeId = "Exception/UserException/CF::File::InvalidFilePointer";

CF::File::InvalidFilePointer* CF::File::InvalidFilePointer::_downcast(::CORBA::Exception* _e) {
  return (InvalidFilePointer*) _NP_is_a(_e, _PD_typeId);
}

const CF::File::InvalidFilePointer* CF::File::InvalidFilePointer::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidFilePointer*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::File::InvalidFilePointer::_NP_duplicate() const {
  return new InvalidFilePointer(*this);
}

const char* CF::File::InvalidFilePointer::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::File::InvalidFilePointer::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/File/InvalidFilePointer:1.0");
  return _PD_repoId;
}
 
void CF::File::InvalidFilePointer::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CF::File_ptr CF::File_Helper::_nil() {
  return ::CF::File::_nil();
}

::CORBA::Boolean CF::File_Helper::is_nil(::CF::File_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::File_Helper::release(::CF::File_ptr p) {
  ::CORBA::release(p);
}

void CF::File_Helper::marshalObjRef(::CF::File_ptr obj, cdrStream& s) {
  ::CF::File::_marshalObjRef(obj, s);
}

CF::File_ptr CF::File_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::File::_unmarshalObjRef(s);
}

void CF::File_Helper::duplicate(::CF::File_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::File_ptr
CF::File::_duplicate(::CF::File_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::File_ptr
CF::File::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::File_ptr
CF::File::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::File_ptr
CF::File::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_File _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_File* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_File;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::File::_PD_repoId = "IDL:CF/File:1.0";


CF::_objref_File::~_objref_File() {
  
}


CF::_objref_File::_objref_File(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::File::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_File::_ptrToObjRef(const char* id)
{
  if( id == ::CF::File::_PD_repoId )
    return (::CF::File_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::File::_PD_repoId) )
    return (::CF::File_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_o_cCF_mOctetSequence_i_cunsigned_plong_e_cCF_mFile_mIOException
class _0RL_cd_23ebd682546aacbd_51000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_51000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::OctetSequence_var arg_0;
  ::CORBA::ULong arg_1;
};

void _0RL_cd_23ebd682546aacbd_51000000::marshalArguments(cdrStream& _n)
{
  arg_1 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_51000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_1 <<= _n;

}

void _0RL_cd_23ebd682546aacbd_51000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::OctetSequence&) arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_51000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new CF::OctetSequence;
  (CF::OctetSequence&)arg_0 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_51000000::_user_exns[] = {
  CF::File::IOException::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_51000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::File::IOException::_PD_repoId) ) {
    CF::File::IOException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_51000000* tcd = (_0RL_cd_23ebd682546aacbd_51000000*)cd;
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->read(tcd->arg_0.out(), tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->read(tcd->arg_0.out(), tcd->arg_1);
  else {
    try {
      impl->read(tcd->arg_0.out(), tcd->arg_1);
    }
    catch(CF::File::IOException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_File::read(OctetSequence_out data, ::CORBA::ULong length)
{
  _0RL_cd_23ebd682546aacbd_51000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_61000000, "read", 5);
  _call_desc.arg_1 = length;

  _invoke(_call_desc);
  data = _call_desc.arg_0._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mOctetSequence_e_cCF_mFile_mIOException
class _0RL_cd_23ebd682546aacbd_71000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_71000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::OctetSequence_var arg_0_;
  const CF::OctetSequence* arg_0;
};

void _0RL_cd_23ebd682546aacbd_71000000::marshalArguments(cdrStream& _n)
{
  (const CF::OctetSequence&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_71000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CF::OctetSequence;
  (CF::OctetSequence&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_71000000::_user_exns[] = {
  CF::File::IOException::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_71000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::File::IOException::_PD_repoId) ) {
    CF::File::IOException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_81000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_71000000* tcd = (_0RL_cd_23ebd682546aacbd_71000000*)cd;
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->write(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->write(*tcd->arg_0);
  else {
    try {
      impl->write(*tcd->arg_0);
    }
    catch(CF::File::IOException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_File::write(const OctetSequence& data)
{
  _0RL_cd_23ebd682546aacbd_71000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_81000000, "write", 6);
  _call_desc.arg_0 = &(OctetSequence&) data;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cunsigned_plong_e_cCF_mFileException
class _0RL_cd_23ebd682546aacbd_91000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_91000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::ULong result;
};

void _0RL_cd_23ebd682546aacbd_91000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_91000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::ULong&)result <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_91000000::_user_exns[] = {
  CF::FileException::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_91000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_91000000* tcd = (_0RL_cd_23ebd682546aacbd_91000000*)cd;
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->sizeOf();
#else
  if (!cd->is_upcall())
    tcd->result = impl->sizeOf();
  else {
    try {
      tcd->result = impl->sizeOf();
    }
    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::ULong CF::_objref_File::sizeOf()
{
  _0RL_cd_23ebd682546aacbd_91000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a1000000, "sizeOf", 7);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_e_cCF_mFileException
class _0RL_cd_23ebd682546aacbd_b1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_b1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23ebd682546aacbd_b1000000::_user_exns[] = {
  CF::FileException::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_b1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->close();
#else
  if (!cd->is_upcall())
    impl->close();
  else {
    try {
      impl->close();
    }
    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_File::close()
{
  _0RL_cd_23ebd682546aacbd_b1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_c1000000, "close", 6);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong_e_cCF_mFile_mInvalidFilePointer_e_cCF_mFileException
class _0RL_cd_23ebd682546aacbd_d1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_d1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::ULong arg_0;
};

void _0RL_cd_23ebd682546aacbd_d1000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_d1000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_d1000000::_user_exns[] = {
  CF::File::InvalidFilePointer::_PD_repoId,
  CF::FileException::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_d1000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::File::InvalidFilePointer::_PD_repoId) ) {
    CF::File::InvalidFilePointer _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::FileException::_PD_repoId) ) {
    CF::FileException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_d1000000* tcd = (_0RL_cd_23ebd682546aacbd_d1000000*)cd;
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->setFilePointer(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->setFilePointer(tcd->arg_0);
  else {
    try {
      impl->setFilePointer(tcd->arg_0);
    }
    catch(CF::File::InvalidFilePointer& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::FileException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_File::setFilePointer(::CORBA::ULong filePointer)
{
  _0RL_cd_23ebd682546aacbd_d1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e1000000, "setFilePointer", 15);
  _call_desc.arg_0 = filePointer;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_23ebd682546aacbd_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_f1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var result;
};

void _0RL_cd_23ebd682546aacbd_f1000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_23ebd682546aacbd_f1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
  tcd->result = impl->fileName();


}

char* CF::_objref_File::fileName()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_02000000, "_get_fileName", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cunsigned_plong
class _0RL_cd_23ebd682546aacbd_12000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_12000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::ULong result;
};

void _0RL_cd_23ebd682546aacbd_12000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_12000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::ULong&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_12000000* tcd = (_0RL_cd_23ebd682546aacbd_12000000*)cd;
  CF::_impl_File* impl = (CF::_impl_File*) svnt->_ptrToInterface(CF::File::_PD_repoId);
  tcd->result = impl->filePointer();


}

::CORBA::ULong CF::_objref_File::filePointer()
{
  _0RL_cd_23ebd682546aacbd_12000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_22000000, "_get_filePointer", 17);


  _invoke(_call_desc);
  return _call_desc.result;


}
CF::_pof_File::~_pof_File() {}


omniObjRef*
CF::_pof_File::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_File(ior, id);
}


::CORBA::Boolean
CF::_pof_File::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::File::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_File _the_pof_CF_mFile;

CF::_impl_File::~_impl_File() {}


::CORBA::Boolean
CF::_impl_File::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "read") ) {

    _0RL_cd_23ebd682546aacbd_51000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_61000000, "read", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "write") ) {

    _0RL_cd_23ebd682546aacbd_71000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_81000000, "write", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "sizeOf") ) {

    _0RL_cd_23ebd682546aacbd_91000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a1000000, "sizeOf", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "close") ) {

    _0RL_cd_23ebd682546aacbd_b1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_c1000000, "close", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setFilePointer") ) {

    _0RL_cd_23ebd682546aacbd_d1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e1000000, "setFilePointer", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_fileName") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_02000000, "_get_fileName", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_filePointer") ) {

    _0RL_cd_23ebd682546aacbd_12000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_22000000, "_get_filePointer", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_File::_ptrToInterface(const char* id)
{
  if( id == ::CF::File::_PD_repoId )
    return (::CF::_impl_File*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::File::_PD_repoId) )
    return (::CF::_impl_File*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_File::_mostDerivedRepoId()
{
  return ::CF::File::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::ResourceFactory::InvalidResourceId::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ResourceFactory::InvalidResourceId::insertToAnyFnNCP = 0;

CF::ResourceFactory::InvalidResourceId::InvalidResourceId(const CF::ResourceFactory::InvalidResourceId& _s) : ::CORBA::UserException(_s)
{
  
}



CF::ResourceFactory::InvalidResourceId& CF::ResourceFactory::InvalidResourceId::operator=(const CF::ResourceFactory::InvalidResourceId& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::ResourceFactory::InvalidResourceId::~InvalidResourceId() {}

void CF::ResourceFactory::InvalidResourceId::_raise() const { throw *this; }

const char* CF::ResourceFactory::InvalidResourceId::_PD_repoId = "IDL:CF/ResourceFactory/InvalidResourceId:1.0";
const char* CF::ResourceFactory::InvalidResourceId::_PD_typeId = "Exception/UserException/CF::ResourceFactory::InvalidResourceId";

CF::ResourceFactory::InvalidResourceId* CF::ResourceFactory::InvalidResourceId::_downcast(::CORBA::Exception* _e) {
  return (InvalidResourceId*) _NP_is_a(_e, _PD_typeId);
}

const CF::ResourceFactory::InvalidResourceId* CF::ResourceFactory::InvalidResourceId::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidResourceId*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ResourceFactory::InvalidResourceId::_NP_duplicate() const {
  return new InvalidResourceId(*this);
}

const char* CF::ResourceFactory::InvalidResourceId::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ResourceFactory::InvalidResourceId::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ResourceFactory/InvalidResourceId:1.0");
  return _PD_repoId;
}
 
void CF::ResourceFactory::InvalidResourceId::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::ResourceFactory::ShutdownFailure::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ResourceFactory::ShutdownFailure::insertToAnyFnNCP = 0;

CF::ResourceFactory::ShutdownFailure::ShutdownFailure(const CF::ResourceFactory::ShutdownFailure& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;

}

CF::ResourceFactory::ShutdownFailure::ShutdownFailure(const char* _msg)
{
  pd_insertToAnyFn    = CF::ResourceFactory::ShutdownFailure::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ResourceFactory::ShutdownFailure::insertToAnyFnNCP;
  msg = _msg;

}



CF::ResourceFactory::ShutdownFailure& CF::ResourceFactory::ShutdownFailure::operator=(const CF::ResourceFactory::ShutdownFailure& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;

  return *this;
}

CF::ResourceFactory::ShutdownFailure::~ShutdownFailure() {}

void CF::ResourceFactory::ShutdownFailure::_raise() const { throw *this; }

const char* CF::ResourceFactory::ShutdownFailure::_PD_repoId = "IDL:CF/ResourceFactory/ShutdownFailure:1.0";
const char* CF::ResourceFactory::ShutdownFailure::_PD_typeId = "Exception/UserException/CF::ResourceFactory::ShutdownFailure";

CF::ResourceFactory::ShutdownFailure* CF::ResourceFactory::ShutdownFailure::_downcast(::CORBA::Exception* _e) {
  return (ShutdownFailure*) _NP_is_a(_e, _PD_typeId);
}

const CF::ResourceFactory::ShutdownFailure* CF::ResourceFactory::ShutdownFailure::_downcast(const ::CORBA::Exception* _e) {
  return (const ShutdownFailure*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ResourceFactory::ShutdownFailure::_NP_duplicate() const {
  return new ShutdownFailure(*this);
}

const char* CF::ResourceFactory::ShutdownFailure::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ResourceFactory::ShutdownFailure::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ResourceFactory/ShutdownFailure:1.0");
  return _PD_repoId;
}
 
void CF::ResourceFactory::ShutdownFailure::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ResourceFactory::ShutdownFailure::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);

}

void
CF::ResourceFactory::ShutdownFailure::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::ResourceFactory::CreateResourceFailure::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ResourceFactory::CreateResourceFailure::insertToAnyFnNCP = 0;

CF::ResourceFactory::CreateResourceFailure::CreateResourceFailure(const CF::ResourceFactory::CreateResourceFailure& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::ResourceFactory::CreateResourceFailure::CreateResourceFailure(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::ResourceFactory::CreateResourceFailure::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ResourceFactory::CreateResourceFailure::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::ResourceFactory::CreateResourceFailure& CF::ResourceFactory::CreateResourceFailure::operator=(const CF::ResourceFactory::CreateResourceFailure& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::ResourceFactory::CreateResourceFailure::~CreateResourceFailure() {}

void CF::ResourceFactory::CreateResourceFailure::_raise() const { throw *this; }

const char* CF::ResourceFactory::CreateResourceFailure::_PD_repoId = "IDL:CF/ResourceFactory/CreateResourceFailure:1.0";
const char* CF::ResourceFactory::CreateResourceFailure::_PD_typeId = "Exception/UserException/CF::ResourceFactory::CreateResourceFailure";

CF::ResourceFactory::CreateResourceFailure* CF::ResourceFactory::CreateResourceFailure::_downcast(::CORBA::Exception* _e) {
  return (CreateResourceFailure*) _NP_is_a(_e, _PD_typeId);
}

const CF::ResourceFactory::CreateResourceFailure* CF::ResourceFactory::CreateResourceFailure::_downcast(const ::CORBA::Exception* _e) {
  return (const CreateResourceFailure*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ResourceFactory::CreateResourceFailure::_NP_duplicate() const {
  return new CreateResourceFailure(*this);
}

const char* CF::ResourceFactory::CreateResourceFailure::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ResourceFactory::CreateResourceFailure::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ResourceFactory/CreateResourceFailure:1.0");
  return _PD_repoId;
}
 
void CF::ResourceFactory::CreateResourceFailure::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ResourceFactory::CreateResourceFailure::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::ResourceFactory::CreateResourceFailure::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

CF::ResourceFactory_ptr CF::ResourceFactory_Helper::_nil() {
  return ::CF::ResourceFactory::_nil();
}

::CORBA::Boolean CF::ResourceFactory_Helper::is_nil(::CF::ResourceFactory_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::ResourceFactory_Helper::release(::CF::ResourceFactory_ptr p) {
  ::CORBA::release(p);
}

void CF::ResourceFactory_Helper::marshalObjRef(::CF::ResourceFactory_ptr obj, cdrStream& s) {
  ::CF::ResourceFactory::_marshalObjRef(obj, s);
}

CF::ResourceFactory_ptr CF::ResourceFactory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::ResourceFactory::_unmarshalObjRef(s);
}

void CF::ResourceFactory_Helper::duplicate(::CF::ResourceFactory_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::ResourceFactory_ptr
CF::ResourceFactory::_duplicate(::CF::ResourceFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::ResourceFactory_ptr
CF::ResourceFactory::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::ResourceFactory_ptr
CF::ResourceFactory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::ResourceFactory_ptr
CF::ResourceFactory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ResourceFactory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ResourceFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ResourceFactory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::ResourceFactory::_PD_repoId = "IDL:CF/ResourceFactory:1.0";


CF::_objref_ResourceFactory::~_objref_ResourceFactory() {
  
}


CF::_objref_ResourceFactory::_objref_ResourceFactory(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::ResourceFactory::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_ResourceFactory::_ptrToObjRef(const char* id)
{
  if( id == ::CF::ResourceFactory::_PD_repoId )
    return (::CF::ResourceFactory_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::ResourceFactory::_PD_repoId) )
    return (::CF::ResourceFactory_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCF_mResource_i_cstring_i_cCF_mProperties_e_cCF_mResourceFactory_mCreateResourceFailure
class _0RL_cd_23ebd682546aacbd_32000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_32000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CF::Properties_var arg_1_;
  const CF::Properties* arg_1;
  CF::Resource_var result;
};

void _0RL_cd_23ebd682546aacbd_32000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const CF::Properties&) *arg_1 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_32000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new CF::Properties;
  (CF::Properties&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_23ebd682546aacbd_32000000::marshalReturnedValues(cdrStream& _n)
{
  CF::Resource_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_32000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::Resource_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_23ebd682546aacbd_32000000::_user_exns[] = {
  CF::ResourceFactory::CreateResourceFailure::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_32000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::ResourceFactory::CreateResourceFailure::_PD_repoId) ) {
    CF::ResourceFactory::CreateResourceFailure _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_42000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_32000000* tcd = (_0RL_cd_23ebd682546aacbd_32000000*)cd;
  CF::_impl_ResourceFactory* impl = (CF::_impl_ResourceFactory*) svnt->_ptrToInterface(CF::ResourceFactory::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->createResource(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->createResource(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->createResource(tcd->arg_0, *tcd->arg_1);
    }
    catch(CF::ResourceFactory::CreateResourceFailure& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CF::Resource_ptr CF::_objref_ResourceFactory::createResource(const char* resourceId, const Properties& qualifiers)
{
  _0RL_cd_23ebd682546aacbd_32000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_42000000, "createResource", 15);
  _call_desc.arg_0 = resourceId;
  _call_desc.arg_1 = &(Properties&) qualifiers;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mResourceFactory_mInvalidResourceId
class _0RL_cd_23ebd682546aacbd_52000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_52000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_52000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_52000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_52000000::_user_exns[] = {
  CF::ResourceFactory::InvalidResourceId::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_52000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::ResourceFactory::InvalidResourceId::_PD_repoId) ) {
    CF::ResourceFactory::InvalidResourceId _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_62000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_52000000* tcd = (_0RL_cd_23ebd682546aacbd_52000000*)cd;
  CF::_impl_ResourceFactory* impl = (CF::_impl_ResourceFactory*) svnt->_ptrToInterface(CF::ResourceFactory::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->releaseResource(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->releaseResource(tcd->arg_0);
  else {
    try {
      impl->releaseResource(tcd->arg_0);
    }
    catch(CF::ResourceFactory::InvalidResourceId& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_ResourceFactory::releaseResource(const char* resourceId)
{
  _0RL_cd_23ebd682546aacbd_52000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_62000000, "releaseResource", 16);
  _call_desc.arg_0 = resourceId;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_e_cCF_mResourceFactory_mShutdownFailure
class _0RL_cd_23ebd682546aacbd_72000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_72000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23ebd682546aacbd_72000000::_user_exns[] = {
  CF::ResourceFactory::ShutdownFailure::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_72000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::ResourceFactory::ShutdownFailure::_PD_repoId) ) {
    CF::ResourceFactory::ShutdownFailure _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  CF::_impl_ResourceFactory* impl = (CF::_impl_ResourceFactory*) svnt->_ptrToInterface(CF::ResourceFactory::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->shutdown();
#else
  if (!cd->is_upcall())
    impl->shutdown();
  else {
    try {
      impl->shutdown();
    }
    catch(CF::ResourceFactory::ShutdownFailure& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_ResourceFactory::shutdown()
{
  _0RL_cd_23ebd682546aacbd_72000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_82000000, "shutdown", 9);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_92000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_ResourceFactory* impl = (CF::_impl_ResourceFactory*) svnt->_ptrToInterface(CF::ResourceFactory::_PD_repoId);
  tcd->result = impl->identifier();


}

char* CF::_objref_ResourceFactory::identifier()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_92000000, "_get_identifier", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_ResourceFactory::~_pof_ResourceFactory() {}


omniObjRef*
CF::_pof_ResourceFactory::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_ResourceFactory(ior, id);
}


::CORBA::Boolean
CF::_pof_ResourceFactory::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::ResourceFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_ResourceFactory _the_pof_CF_mResourceFactory;

CF::_impl_ResourceFactory::~_impl_ResourceFactory() {}


::CORBA::Boolean
CF::_impl_ResourceFactory::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "createResource") ) {

    _0RL_cd_23ebd682546aacbd_32000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_42000000, "createResource", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "releaseResource") ) {

    _0RL_cd_23ebd682546aacbd_52000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_62000000, "releaseResource", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shutdown") ) {

    _0RL_cd_23ebd682546aacbd_72000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_82000000, "shutdown", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_identifier") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_92000000, "_get_identifier", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_ResourceFactory::_ptrToInterface(const char* id)
{
  if( id == ::CF::ResourceFactory::_PD_repoId )
    return (::CF::_impl_ResourceFactory*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::ResourceFactory::_PD_repoId) )
    return (::CF::_impl_ResourceFactory*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_ResourceFactory::_mostDerivedRepoId()
{
  return ::CF::ResourceFactory::_PD_repoId;
}

void
CF::FileManager::MountType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(mountPoint,0);
  FileSystem::_marshalObjRef(fs,_n);

}

void
CF::FileManager::MountType::operator<<= (cdrStream &_n)
{
  mountPoint = _n.unmarshalString(0);
  fs = FileSystem::_unmarshalObjRef(_n);

}

::CORBA::Exception::insertExceptionToAny CF::FileManager::NonExistentMount::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::FileManager::NonExistentMount::insertToAnyFnNCP = 0;

CF::FileManager::NonExistentMount::NonExistentMount(const CF::FileManager::NonExistentMount& _s) : ::CORBA::UserException(_s)
{
  
}



CF::FileManager::NonExistentMount& CF::FileManager::NonExistentMount::operator=(const CF::FileManager::NonExistentMount& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::FileManager::NonExistentMount::~NonExistentMount() {}

void CF::FileManager::NonExistentMount::_raise() const { throw *this; }

const char* CF::FileManager::NonExistentMount::_PD_repoId = "IDL:CF/FileManager/NonExistentMount:1.0";
const char* CF::FileManager::NonExistentMount::_PD_typeId = "Exception/UserException/CF::FileManager::NonExistentMount";

CF::FileManager::NonExistentMount* CF::FileManager::NonExistentMount::_downcast(::CORBA::Exception* _e) {
  return (NonExistentMount*) _NP_is_a(_e, _PD_typeId);
}

const CF::FileManager::NonExistentMount* CF::FileManager::NonExistentMount::_downcast(const ::CORBA::Exception* _e) {
  return (const NonExistentMount*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::FileManager::NonExistentMount::_NP_duplicate() const {
  return new NonExistentMount(*this);
}

const char* CF::FileManager::NonExistentMount::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::FileManager::NonExistentMount::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/FileManager/NonExistentMount:1.0");
  return _PD_repoId;
}
 
void CF::FileManager::NonExistentMount::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::FileManager::InvalidFileSystem::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::FileManager::InvalidFileSystem::insertToAnyFnNCP = 0;

CF::FileManager::InvalidFileSystem::InvalidFileSystem(const CF::FileManager::InvalidFileSystem& _s) : ::CORBA::UserException(_s)
{
  
}



CF::FileManager::InvalidFileSystem& CF::FileManager::InvalidFileSystem::operator=(const CF::FileManager::InvalidFileSystem& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::FileManager::InvalidFileSystem::~InvalidFileSystem() {}

void CF::FileManager::InvalidFileSystem::_raise() const { throw *this; }

const char* CF::FileManager::InvalidFileSystem::_PD_repoId = "IDL:CF/FileManager/InvalidFileSystem:1.0";
const char* CF::FileManager::InvalidFileSystem::_PD_typeId = "Exception/UserException/CF::FileManager::InvalidFileSystem";

CF::FileManager::InvalidFileSystem* CF::FileManager::InvalidFileSystem::_downcast(::CORBA::Exception* _e) {
  return (InvalidFileSystem*) _NP_is_a(_e, _PD_typeId);
}

const CF::FileManager::InvalidFileSystem* CF::FileManager::InvalidFileSystem::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidFileSystem*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::FileManager::InvalidFileSystem::_NP_duplicate() const {
  return new InvalidFileSystem(*this);
}

const char* CF::FileManager::InvalidFileSystem::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::FileManager::InvalidFileSystem::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/FileManager/InvalidFileSystem:1.0");
  return _PD_repoId;
}
 
void CF::FileManager::InvalidFileSystem::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::FileManager::MountPointAlreadyExists::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::FileManager::MountPointAlreadyExists::insertToAnyFnNCP = 0;

CF::FileManager::MountPointAlreadyExists::MountPointAlreadyExists(const CF::FileManager::MountPointAlreadyExists& _s) : ::CORBA::UserException(_s)
{
  
}



CF::FileManager::MountPointAlreadyExists& CF::FileManager::MountPointAlreadyExists::operator=(const CF::FileManager::MountPointAlreadyExists& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::FileManager::MountPointAlreadyExists::~MountPointAlreadyExists() {}

void CF::FileManager::MountPointAlreadyExists::_raise() const { throw *this; }

const char* CF::FileManager::MountPointAlreadyExists::_PD_repoId = "IDL:CF/FileManager/MountPointAlreadyExists:1.0";
const char* CF::FileManager::MountPointAlreadyExists::_PD_typeId = "Exception/UserException/CF::FileManager::MountPointAlreadyExists";

CF::FileManager::MountPointAlreadyExists* CF::FileManager::MountPointAlreadyExists::_downcast(::CORBA::Exception* _e) {
  return (MountPointAlreadyExists*) _NP_is_a(_e, _PD_typeId);
}

const CF::FileManager::MountPointAlreadyExists* CF::FileManager::MountPointAlreadyExists::_downcast(const ::CORBA::Exception* _e) {
  return (const MountPointAlreadyExists*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::FileManager::MountPointAlreadyExists::_NP_duplicate() const {
  return new MountPointAlreadyExists(*this);
}

const char* CF::FileManager::MountPointAlreadyExists::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::FileManager::MountPointAlreadyExists::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/FileManager/MountPointAlreadyExists:1.0");
  return _PD_repoId;
}
 
void CF::FileManager::MountPointAlreadyExists::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CF::FileManager_ptr CF::FileManager_Helper::_nil() {
  return ::CF::FileManager::_nil();
}

::CORBA::Boolean CF::FileManager_Helper::is_nil(::CF::FileManager_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::FileManager_Helper::release(::CF::FileManager_ptr p) {
  ::CORBA::release(p);
}

void CF::FileManager_Helper::marshalObjRef(::CF::FileManager_ptr obj, cdrStream& s) {
  ::CF::FileManager::_marshalObjRef(obj, s);
}

CF::FileManager_ptr CF::FileManager_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::FileManager::_unmarshalObjRef(s);
}

void CF::FileManager_Helper::duplicate(::CF::FileManager_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::FileManager_ptr
CF::FileManager::_duplicate(::CF::FileManager_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::FileManager_ptr
CF::FileManager::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::FileManager_ptr
CF::FileManager::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::FileManager_ptr
CF::FileManager::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_FileManager _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_FileManager* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_FileManager;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::FileManager::_PD_repoId = "IDL:CF/FileManager:1.0";


CF::_objref_FileManager::~_objref_FileManager() {
  
}


CF::_objref_FileManager::_objref_FileManager(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::FileManager::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_FileSystem(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_FileManager::_ptrToObjRef(const char* id)
{
  if( id == ::CF::FileManager::_PD_repoId )
    return (::CF::FileManager_ptr) this;
  if( id == ::CF::FileSystem::_PD_repoId )
    return (::CF::FileSystem_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::FileManager::_PD_repoId) )
    return (::CF::FileManager_ptr) this;
  if( omni::strMatch(id, ::CF::FileSystem::_PD_repoId) )
    return (::CF::FileSystem_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cCF_mFileSystem_e_cCF_mFileManager_mInvalidFileSystem_e_cCF_mFileManager_mMountPointAlreadyExists_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_a2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_a2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CF::FileSystem_var arg_1_;
  CF::FileSystem_ptr arg_1;
};

void _0RL_cd_23ebd682546aacbd_a2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  CF::FileSystem::_marshalObjRef(arg_1,_n);

}

void _0RL_cd_23ebd682546aacbd_a2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = CF::FileSystem::_unmarshalObjRef(_n);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_a2000000::_user_exns[] = {
  CF::FileManager::InvalidFileSystem::_PD_repoId,
  CF::FileManager::MountPointAlreadyExists::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_a2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileManager::InvalidFileSystem::_PD_repoId) ) {
    CF::FileManager::InvalidFileSystem _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::FileManager::MountPointAlreadyExists::_PD_repoId) ) {
    CF::FileManager::MountPointAlreadyExists _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_b2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_a2000000* tcd = (_0RL_cd_23ebd682546aacbd_a2000000*)cd;
  CF::_impl_FileManager* impl = (CF::_impl_FileManager*) svnt->_ptrToInterface(CF::FileManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->mount(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->mount(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->mount(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::FileManager::InvalidFileSystem& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::FileManager::MountPointAlreadyExists& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileManager::mount(const char* mountPoint, FileSystem_ptr file_System)
{
  _0RL_cd_23ebd682546aacbd_a2000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b2000000, "mount", 6);
  _call_desc.arg_0 = mountPoint;
  _call_desc.arg_1 = file_System;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mFileManager_mNonExistentMount
class _0RL_cd_23ebd682546aacbd_c2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_c2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_c2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_c2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_c2000000::_user_exns[] = {
  CF::FileManager::NonExistentMount::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_c2000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::FileManager::NonExistentMount::_PD_repoId) ) {
    CF::FileManager::NonExistentMount _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_c2000000* tcd = (_0RL_cd_23ebd682546aacbd_c2000000*)cd;
  CF::_impl_FileManager* impl = (CF::_impl_FileManager*) svnt->_ptrToInterface(CF::FileManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unmount(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unmount(tcd->arg_0);
  else {
    try {
      impl->unmount(tcd->arg_0);
    }
    catch(CF::FileManager::NonExistentMount& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_FileManager::unmount(const char* mountPoint)
{
  _0RL_cd_23ebd682546aacbd_c2000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d2000000, "unmount", 8);
  _call_desc.arg_0 = mountPoint;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mFileManager_mMountSequence
class _0RL_cd_23ebd682546aacbd_e2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_e2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::FileManager::MountSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_e2000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::FileManager::MountSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_e2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::FileManager::MountSequence;
  (CF::FileManager::MountSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_e2000000* tcd = (_0RL_cd_23ebd682546aacbd_e2000000*)cd;
  CF::_impl_FileManager* impl = (CF::_impl_FileManager*) svnt->_ptrToInterface(CF::FileManager::_PD_repoId);
  tcd->result = impl->getMounts();


}

CF::FileManager::MountSequence* CF::_objref_FileManager::getMounts()
{
  _0RL_cd_23ebd682546aacbd_e2000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f2000000, "getMounts", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_FileManager::~_pof_FileManager() {}


omniObjRef*
CF::_pof_FileManager::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_FileManager(ior, id);
}


::CORBA::Boolean
CF::_pof_FileManager::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::FileManager::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::FileSystem::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_FileManager _the_pof_CF_mFileManager;

CF::_impl_FileManager::~_impl_FileManager() {}


::CORBA::Boolean
CF::_impl_FileManager::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "mount") ) {

    _0RL_cd_23ebd682546aacbd_a2000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b2000000, "mount", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unmount") ) {

    _0RL_cd_23ebd682546aacbd_c2000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d2000000, "unmount", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getMounts") ) {

    _0RL_cd_23ebd682546aacbd_e2000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f2000000, "getMounts", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_FileSystem::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_FileSystem*)this)->
      _impl_FileSystem::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_FileManager::_ptrToInterface(const char* id)
{
  if( id == ::CF::FileManager::_PD_repoId )
    return (::CF::_impl_FileManager*) this;
  if( id == ::CF::FileSystem::_PD_repoId )
    return (::CF::_impl_FileSystem*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::FileManager::_PD_repoId) )
    return (::CF::_impl_FileManager*) this;
  if( omni::strMatch(id, ::CF::FileSystem::_PD_repoId) )
    return (::CF::_impl_FileSystem*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_FileManager::_mostDerivedRepoId()
{
  return ::CF::FileManager::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::Port::InvalidPort::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::Port::InvalidPort::insertToAnyFnNCP = 0;

CF::Port::InvalidPort::InvalidPort(const CF::Port::InvalidPort& _s) : ::CORBA::UserException(_s)
{
  errorCode = _s.errorCode;
  msg = _s.msg;

}

CF::Port::InvalidPort::InvalidPort(::CORBA::UShort _errorCode, const char* _msg)
{
  pd_insertToAnyFn    = CF::Port::InvalidPort::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::Port::InvalidPort::insertToAnyFnNCP;
  errorCode = _errorCode;
  msg = _msg;

}



CF::Port::InvalidPort& CF::Port::InvalidPort::operator=(const CF::Port::InvalidPort& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorCode = _s.errorCode;
  msg = _s.msg;

  return *this;
}

CF::Port::InvalidPort::~InvalidPort() {}

void CF::Port::InvalidPort::_raise() const { throw *this; }

const char* CF::Port::InvalidPort::_PD_repoId = "IDL:CF/Port/InvalidPort:1.0";
const char* CF::Port::InvalidPort::_PD_typeId = "Exception/UserException/CF::Port::InvalidPort";

CF::Port::InvalidPort* CF::Port::InvalidPort::_downcast(::CORBA::Exception* _e) {
  return (InvalidPort*) _NP_is_a(_e, _PD_typeId);
}

const CF::Port::InvalidPort* CF::Port::InvalidPort::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidPort*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::Port::InvalidPort::_NP_duplicate() const {
  return new InvalidPort(*this);
}

const char* CF::Port::InvalidPort::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::Port::InvalidPort::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/Port/InvalidPort:1.0");
  return _PD_repoId;
}
 
void CF::Port::InvalidPort::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::Port::InvalidPort::operator>>= (cdrStream& _n) const
{
  errorCode >>= _n;
  _n.marshalString(msg,0);

}

void
CF::Port::InvalidPort::operator<<= (cdrStream& _n)
{
  (::CORBA::UShort&)errorCode <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::Port::OccupiedPort::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::Port::OccupiedPort::insertToAnyFnNCP = 0;

CF::Port::OccupiedPort::OccupiedPort(const CF::Port::OccupiedPort& _s) : ::CORBA::UserException(_s)
{
  
}



CF::Port::OccupiedPort& CF::Port::OccupiedPort::operator=(const CF::Port::OccupiedPort& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::Port::OccupiedPort::~OccupiedPort() {}

void CF::Port::OccupiedPort::_raise() const { throw *this; }

const char* CF::Port::OccupiedPort::_PD_repoId = "IDL:CF/Port/OccupiedPort:1.0";
const char* CF::Port::OccupiedPort::_PD_typeId = "Exception/UserException/CF::Port::OccupiedPort";

CF::Port::OccupiedPort* CF::Port::OccupiedPort::_downcast(::CORBA::Exception* _e) {
  return (OccupiedPort*) _NP_is_a(_e, _PD_typeId);
}

const CF::Port::OccupiedPort* CF::Port::OccupiedPort::_downcast(const ::CORBA::Exception* _e) {
  return (const OccupiedPort*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::Port::OccupiedPort::_NP_duplicate() const {
  return new OccupiedPort(*this);
}

const char* CF::Port::OccupiedPort::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::Port::OccupiedPort::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/Port/OccupiedPort:1.0");
  return _PD_repoId;
}
 
void CF::Port::OccupiedPort::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CF::Port_ptr CF::Port_Helper::_nil() {
  return ::CF::Port::_nil();
}

::CORBA::Boolean CF::Port_Helper::is_nil(::CF::Port_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::Port_Helper::release(::CF::Port_ptr p) {
  ::CORBA::release(p);
}

void CF::Port_Helper::marshalObjRef(::CF::Port_ptr obj, cdrStream& s) {
  ::CF::Port::_marshalObjRef(obj, s);
}

CF::Port_ptr CF::Port_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::Port::_unmarshalObjRef(s);
}

void CF::Port_Helper::duplicate(::CF::Port_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::Port_ptr
CF::Port::_duplicate(::CF::Port_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::Port_ptr
CF::Port::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::Port_ptr
CF::Port::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::Port_ptr
CF::Port::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Port _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Port* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Port;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::Port::_PD_repoId = "IDL:CF/Port:1.0";


CF::_objref_Port::~_objref_Port() {
  
}


CF::_objref_Port::_objref_Port(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::Port::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_Port::_ptrToObjRef(const char* id)
{
  if( id == ::CF::Port::_PD_repoId )
    return (::CF::Port_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::Port::_PD_repoId) )
    return (::CF::Port_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mObject_i_cstring_e_cCF_mPort_mInvalidPort_e_cCF_mPort_mOccupiedPort
class _0RL_cd_23ebd682546aacbd_03000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_03000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::Object_var arg_0_;
  CORBA::Object_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_23ebd682546aacbd_03000000::marshalArguments(cdrStream& _n)
{
  CORBA::Object::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_23ebd682546aacbd_03000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CORBA::Object::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_03000000::_user_exns[] = {
  CF::Port::InvalidPort::_PD_repoId,
  CF::Port::OccupiedPort::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_03000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Port::InvalidPort::_PD_repoId) ) {
    CF::Port::InvalidPort _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::Port::OccupiedPort::_PD_repoId) ) {
    CF::Port::OccupiedPort _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_03000000* tcd = (_0RL_cd_23ebd682546aacbd_03000000*)cd;
  CF::_impl_Port* impl = (CF::_impl_Port*) svnt->_ptrToInterface(CF::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->connectPort(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->connectPort(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->connectPort(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::Port::InvalidPort& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::Port::OccupiedPort& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_Port::connectPort(::CORBA::Object_ptr connection, const char* connectionId)
{
  _0RL_cd_23ebd682546aacbd_03000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_13000000, "connectPort", 12);
  _call_desc.arg_0 = connection;
  _call_desc.arg_1 = connectionId;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mPort_mInvalidPort
class _0RL_cd_23ebd682546aacbd_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_23000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_23000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_23000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_23000000::_user_exns[] = {
  CF::Port::InvalidPort::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_23000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Port::InvalidPort::_PD_repoId) ) {
    CF::Port::InvalidPort _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_23000000* tcd = (_0RL_cd_23ebd682546aacbd_23000000*)cd;
  CF::_impl_Port* impl = (CF::_impl_Port*) svnt->_ptrToInterface(CF::Port::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->disconnectPort(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->disconnectPort(tcd->arg_0);
  else {
    try {
      impl->disconnectPort(tcd->arg_0);
    }
    catch(CF::Port::InvalidPort& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_Port::disconnectPort(const char* connectionId)
{
  _0RL_cd_23ebd682546aacbd_23000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_33000000, "disconnectPort", 15);
  _call_desc.arg_0 = connectionId;

  _invoke(_call_desc);



}
CF::_pof_Port::~_pof_Port() {}


omniObjRef*
CF::_pof_Port::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_Port(ior, id);
}


::CORBA::Boolean
CF::_pof_Port::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::Port::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_Port _the_pof_CF_mPort;

CF::_impl_Port::~_impl_Port() {}


::CORBA::Boolean
CF::_impl_Port::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "connectPort") ) {

    _0RL_cd_23ebd682546aacbd_03000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_13000000, "connectPort", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "disconnectPort") ) {

    _0RL_cd_23ebd682546aacbd_23000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_33000000, "disconnectPort", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_Port::_ptrToInterface(const char* id)
{
  if( id == ::CF::Port::_PD_repoId )
    return (::CF::_impl_Port*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::Port::_PD_repoId) )
    return (::CF::_impl_Port*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_Port::_mostDerivedRepoId()
{
  return ::CF::Port::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::LifeCycle::InitializeError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::LifeCycle::InitializeError::insertToAnyFnNCP = 0;

CF::LifeCycle::InitializeError::InitializeError(const CF::LifeCycle::InitializeError& _s) : ::CORBA::UserException(_s)
{
  errorMessages = _s.errorMessages;

}

CF::LifeCycle::InitializeError::InitializeError(const StringSequence _errorMessages)
{
  pd_insertToAnyFn    = CF::LifeCycle::InitializeError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::LifeCycle::InitializeError::insertToAnyFnNCP;
  errorMessages = _errorMessages;

}



CF::LifeCycle::InitializeError& CF::LifeCycle::InitializeError::operator=(const CF::LifeCycle::InitializeError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorMessages = _s.errorMessages;

  return *this;
}

CF::LifeCycle::InitializeError::~InitializeError() {}

void CF::LifeCycle::InitializeError::_raise() const { throw *this; }

const char* CF::LifeCycle::InitializeError::_PD_repoId = "IDL:CF/LifeCycle/InitializeError:1.0";
const char* CF::LifeCycle::InitializeError::_PD_typeId = "Exception/UserException/CF::LifeCycle::InitializeError";

CF::LifeCycle::InitializeError* CF::LifeCycle::InitializeError::_downcast(::CORBA::Exception* _e) {
  return (InitializeError*) _NP_is_a(_e, _PD_typeId);
}

const CF::LifeCycle::InitializeError* CF::LifeCycle::InitializeError::_downcast(const ::CORBA::Exception* _e) {
  return (const InitializeError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::LifeCycle::InitializeError::_NP_duplicate() const {
  return new InitializeError(*this);
}

const char* CF::LifeCycle::InitializeError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::LifeCycle::InitializeError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/LifeCycle/InitializeError:1.0");
  return _PD_repoId;
}
 
void CF::LifeCycle::InitializeError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::LifeCycle::InitializeError::operator>>= (cdrStream& _n) const
{
  (const StringSequence&) errorMessages >>= _n;

}

void
CF::LifeCycle::InitializeError::operator<<= (cdrStream& _n)
{
  (StringSequence&)errorMessages <<= _n;

}

::CORBA::Exception::insertExceptionToAny CF::LifeCycle::ReleaseError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::LifeCycle::ReleaseError::insertToAnyFnNCP = 0;

CF::LifeCycle::ReleaseError::ReleaseError(const CF::LifeCycle::ReleaseError& _s) : ::CORBA::UserException(_s)
{
  errorMessages = _s.errorMessages;

}

CF::LifeCycle::ReleaseError::ReleaseError(const StringSequence _errorMessages)
{
  pd_insertToAnyFn    = CF::LifeCycle::ReleaseError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::LifeCycle::ReleaseError::insertToAnyFnNCP;
  errorMessages = _errorMessages;

}



CF::LifeCycle::ReleaseError& CF::LifeCycle::ReleaseError::operator=(const CF::LifeCycle::ReleaseError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorMessages = _s.errorMessages;

  return *this;
}

CF::LifeCycle::ReleaseError::~ReleaseError() {}

void CF::LifeCycle::ReleaseError::_raise() const { throw *this; }

const char* CF::LifeCycle::ReleaseError::_PD_repoId = "IDL:CF/LifeCycle/ReleaseError:1.0";
const char* CF::LifeCycle::ReleaseError::_PD_typeId = "Exception/UserException/CF::LifeCycle::ReleaseError";

CF::LifeCycle::ReleaseError* CF::LifeCycle::ReleaseError::_downcast(::CORBA::Exception* _e) {
  return (ReleaseError*) _NP_is_a(_e, _PD_typeId);
}

const CF::LifeCycle::ReleaseError* CF::LifeCycle::ReleaseError::_downcast(const ::CORBA::Exception* _e) {
  return (const ReleaseError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::LifeCycle::ReleaseError::_NP_duplicate() const {
  return new ReleaseError(*this);
}

const char* CF::LifeCycle::ReleaseError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::LifeCycle::ReleaseError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/LifeCycle/ReleaseError:1.0");
  return _PD_repoId;
}
 
void CF::LifeCycle::ReleaseError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::LifeCycle::ReleaseError::operator>>= (cdrStream& _n) const
{
  (const StringSequence&) errorMessages >>= _n;

}

void
CF::LifeCycle::ReleaseError::operator<<= (cdrStream& _n)
{
  (StringSequence&)errorMessages <<= _n;

}

CF::LifeCycle_ptr CF::LifeCycle_Helper::_nil() {
  return ::CF::LifeCycle::_nil();
}

::CORBA::Boolean CF::LifeCycle_Helper::is_nil(::CF::LifeCycle_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::LifeCycle_Helper::release(::CF::LifeCycle_ptr p) {
  ::CORBA::release(p);
}

void CF::LifeCycle_Helper::marshalObjRef(::CF::LifeCycle_ptr obj, cdrStream& s) {
  ::CF::LifeCycle::_marshalObjRef(obj, s);
}

CF::LifeCycle_ptr CF::LifeCycle_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::LifeCycle::_unmarshalObjRef(s);
}

void CF::LifeCycle_Helper::duplicate(::CF::LifeCycle_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::LifeCycle_ptr
CF::LifeCycle::_duplicate(::CF::LifeCycle_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::LifeCycle_ptr
CF::LifeCycle::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::LifeCycle_ptr
CF::LifeCycle::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::LifeCycle_ptr
CF::LifeCycle::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_LifeCycle _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_LifeCycle* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_LifeCycle;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::LifeCycle::_PD_repoId = "IDL:CF/LifeCycle:1.0";


CF::_objref_LifeCycle::~_objref_LifeCycle() {
  
}


CF::_objref_LifeCycle::_objref_LifeCycle(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::LifeCycle::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_LifeCycle::_ptrToObjRef(const char* id)
{
  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::LifeCycle_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::LifeCycle_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_e_cCF_mLifeCycle_mInitializeError
class _0RL_cd_23ebd682546aacbd_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_43000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23ebd682546aacbd_43000000::_user_exns[] = {
  CF::LifeCycle::InitializeError::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_43000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::LifeCycle::InitializeError::_PD_repoId) ) {
    CF::LifeCycle::InitializeError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  CF::_impl_LifeCycle* impl = (CF::_impl_LifeCycle*) svnt->_ptrToInterface(CF::LifeCycle::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->initialize();
#else
  if (!cd->is_upcall())
    impl->initialize();
  else {
    try {
      impl->initialize();
    }
    catch(CF::LifeCycle::InitializeError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_LifeCycle::initialize()
{
  _0RL_cd_23ebd682546aacbd_43000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_53000000, "initialize", 11);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_e_cCF_mLifeCycle_mReleaseError
class _0RL_cd_23ebd682546aacbd_63000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_63000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23ebd682546aacbd_63000000::_user_exns[] = {
  CF::LifeCycle::ReleaseError::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_63000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::LifeCycle::ReleaseError::_PD_repoId) ) {
    CF::LifeCycle::ReleaseError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  CF::_impl_LifeCycle* impl = (CF::_impl_LifeCycle*) svnt->_ptrToInterface(CF::LifeCycle::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->releaseObject();
#else
  if (!cd->is_upcall())
    impl->releaseObject();
  else {
    try {
      impl->releaseObject();
    }
    catch(CF::LifeCycle::ReleaseError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_LifeCycle::releaseObject()
{
  _0RL_cd_23ebd682546aacbd_63000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_73000000, "releaseObject", 14);


  _invoke(_call_desc);



}
CF::_pof_LifeCycle::~_pof_LifeCycle() {}


omniObjRef*
CF::_pof_LifeCycle::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_LifeCycle(ior, id);
}


::CORBA::Boolean
CF::_pof_LifeCycle::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_LifeCycle _the_pof_CF_mLifeCycle;

CF::_impl_LifeCycle::~_impl_LifeCycle() {}


::CORBA::Boolean
CF::_impl_LifeCycle::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "initialize") ) {

    _0RL_cd_23ebd682546aacbd_43000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_53000000, "initialize", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "releaseObject") ) {

    _0RL_cd_23ebd682546aacbd_63000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_73000000, "releaseObject", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_LifeCycle::_ptrToInterface(const char* id)
{
  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::_impl_LifeCycle*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::_impl_LifeCycle*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_LifeCycle::_mostDerivedRepoId()
{
  return ::CF::LifeCycle::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::TestableObject::UnknownTest::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::TestableObject::UnknownTest::insertToAnyFnNCP = 0;

CF::TestableObject::UnknownTest::UnknownTest(const CF::TestableObject::UnknownTest& _s) : ::CORBA::UserException(_s)
{
  
}



CF::TestableObject::UnknownTest& CF::TestableObject::UnknownTest::operator=(const CF::TestableObject::UnknownTest& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::TestableObject::UnknownTest::~UnknownTest() {}

void CF::TestableObject::UnknownTest::_raise() const { throw *this; }

const char* CF::TestableObject::UnknownTest::_PD_repoId = "IDL:CF/TestableObject/UnknownTest:1.0";
const char* CF::TestableObject::UnknownTest::_PD_typeId = "Exception/UserException/CF::TestableObject::UnknownTest";

CF::TestableObject::UnknownTest* CF::TestableObject::UnknownTest::_downcast(::CORBA::Exception* _e) {
  return (UnknownTest*) _NP_is_a(_e, _PD_typeId);
}

const CF::TestableObject::UnknownTest* CF::TestableObject::UnknownTest::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownTest*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::TestableObject::UnknownTest::_NP_duplicate() const {
  return new UnknownTest(*this);
}

const char* CF::TestableObject::UnknownTest::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::TestableObject::UnknownTest::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/TestableObject/UnknownTest:1.0");
  return _PD_repoId;
}
 
void CF::TestableObject::UnknownTest::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CF::TestableObject_ptr CF::TestableObject_Helper::_nil() {
  return ::CF::TestableObject::_nil();
}

::CORBA::Boolean CF::TestableObject_Helper::is_nil(::CF::TestableObject_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::TestableObject_Helper::release(::CF::TestableObject_ptr p) {
  ::CORBA::release(p);
}

void CF::TestableObject_Helper::marshalObjRef(::CF::TestableObject_ptr obj, cdrStream& s) {
  ::CF::TestableObject::_marshalObjRef(obj, s);
}

CF::TestableObject_ptr CF::TestableObject_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::TestableObject::_unmarshalObjRef(s);
}

void CF::TestableObject_Helper::duplicate(::CF::TestableObject_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::TestableObject_ptr
CF::TestableObject::_duplicate(::CF::TestableObject_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::TestableObject_ptr
CF::TestableObject::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::TestableObject_ptr
CF::TestableObject::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::TestableObject_ptr
CF::TestableObject::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_TestableObject _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_TestableObject* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_TestableObject;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::TestableObject::_PD_repoId = "IDL:CF/TestableObject:1.0";


CF::_objref_TestableObject::~_objref_TestableObject() {
  
}


CF::_objref_TestableObject::_objref_TestableObject(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::TestableObject::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_TestableObject::_ptrToObjRef(const char* id)
{
  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::TestableObject_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::TestableObject_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong_n_cCF_mProperties_e_cCF_mTestableObject_mUnknownTest_e_cCF_mUnknownProperties
class _0RL_cd_23ebd682546aacbd_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_83000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::ULong arg_0;
  CF::Properties_var arg_1_;
  CF::Properties* arg_1;
};

void _0RL_cd_23ebd682546aacbd_83000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const CF::Properties&) *arg_1 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_83000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::ULong&)arg_0 <<= _n;
  arg_1_ = new CF::Properties;
  (CF::Properties&)arg_1_ <<= _n;
  arg_1 = &arg_1_.inout();

}

void _0RL_cd_23ebd682546aacbd_83000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::Properties&) *arg_1 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_83000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::Properties&)*arg_1 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_83000000::_user_exns[] = {
  CF::TestableObject::UnknownTest::_PD_repoId,
  CF::UnknownProperties::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_83000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::TestableObject::UnknownTest::_PD_repoId) ) {
    CF::TestableObject::UnknownTest _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::UnknownProperties::_PD_repoId) ) {
    CF::UnknownProperties _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_83000000* tcd = (_0RL_cd_23ebd682546aacbd_83000000*)cd;
  CF::_impl_TestableObject* impl = (CF::_impl_TestableObject*) svnt->_ptrToInterface(CF::TestableObject::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->runTest(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->runTest(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      impl->runTest(tcd->arg_0, *tcd->arg_1);
    }
    catch(CF::TestableObject::UnknownTest& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::UnknownProperties& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_TestableObject::runTest(::CORBA::ULong testid, Properties& testValues)
{
  _0RL_cd_23ebd682546aacbd_83000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_93000000, "runTest", 8);
  _call_desc.arg_0 = testid;
  _call_desc.arg_1 = &(Properties&) testValues;

  _invoke(_call_desc);



}
CF::_pof_TestableObject::~_pof_TestableObject() {}


omniObjRef*
CF::_pof_TestableObject::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_TestableObject(ior, id);
}


::CORBA::Boolean
CF::_pof_TestableObject::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::TestableObject::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_TestableObject _the_pof_CF_mTestableObject;

CF::_impl_TestableObject::~_impl_TestableObject() {}


::CORBA::Boolean
CF::_impl_TestableObject::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "runTest") ) {

    _0RL_cd_23ebd682546aacbd_83000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_93000000, "runTest", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_TestableObject::_ptrToInterface(const char* id)
{
  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::_impl_TestableObject*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::_impl_TestableObject*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_TestableObject::_mostDerivedRepoId()
{
  return ::CF::TestableObject::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::PropertySet::InvalidConfiguration::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::PropertySet::InvalidConfiguration::insertToAnyFnNCP = 0;

CF::PropertySet::InvalidConfiguration::InvalidConfiguration(const CF::PropertySet::InvalidConfiguration& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;
  invalidProperties = _s.invalidProperties;

}

CF::PropertySet::InvalidConfiguration::InvalidConfiguration(const char* _msg, const Properties _invalidProperties)
{
  pd_insertToAnyFn    = CF::PropertySet::InvalidConfiguration::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::PropertySet::InvalidConfiguration::insertToAnyFnNCP;
  msg = _msg;
  invalidProperties = _invalidProperties;

}



CF::PropertySet::InvalidConfiguration& CF::PropertySet::InvalidConfiguration::operator=(const CF::PropertySet::InvalidConfiguration& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;
  invalidProperties = _s.invalidProperties;

  return *this;
}

CF::PropertySet::InvalidConfiguration::~InvalidConfiguration() {}

void CF::PropertySet::InvalidConfiguration::_raise() const { throw *this; }

const char* CF::PropertySet::InvalidConfiguration::_PD_repoId = "IDL:CF/PropertySet/InvalidConfiguration:1.0";
const char* CF::PropertySet::InvalidConfiguration::_PD_typeId = "Exception/UserException/CF::PropertySet::InvalidConfiguration";

CF::PropertySet::InvalidConfiguration* CF::PropertySet::InvalidConfiguration::_downcast(::CORBA::Exception* _e) {
  return (InvalidConfiguration*) _NP_is_a(_e, _PD_typeId);
}

const CF::PropertySet::InvalidConfiguration* CF::PropertySet::InvalidConfiguration::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidConfiguration*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::PropertySet::InvalidConfiguration::_NP_duplicate() const {
  return new InvalidConfiguration(*this);
}

const char* CF::PropertySet::InvalidConfiguration::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::PropertySet::InvalidConfiguration::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/PropertySet/InvalidConfiguration:1.0");
  return _PD_repoId;
}
 
void CF::PropertySet::InvalidConfiguration::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::PropertySet::InvalidConfiguration::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);
  (const Properties&) invalidProperties >>= _n;

}

void
CF::PropertySet::InvalidConfiguration::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);
  (Properties&)invalidProperties <<= _n;

}

::CORBA::Exception::insertExceptionToAny CF::PropertySet::PartialConfiguration::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::PropertySet::PartialConfiguration::insertToAnyFnNCP = 0;

CF::PropertySet::PartialConfiguration::PartialConfiguration(const CF::PropertySet::PartialConfiguration& _s) : ::CORBA::UserException(_s)
{
  invalidProperties = _s.invalidProperties;

}

CF::PropertySet::PartialConfiguration::PartialConfiguration(const Properties _invalidProperties)
{
  pd_insertToAnyFn    = CF::PropertySet::PartialConfiguration::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::PropertySet::PartialConfiguration::insertToAnyFnNCP;
  invalidProperties = _invalidProperties;

}



CF::PropertySet::PartialConfiguration& CF::PropertySet::PartialConfiguration::operator=(const CF::PropertySet::PartialConfiguration& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidProperties = _s.invalidProperties;

  return *this;
}

CF::PropertySet::PartialConfiguration::~PartialConfiguration() {}

void CF::PropertySet::PartialConfiguration::_raise() const { throw *this; }

const char* CF::PropertySet::PartialConfiguration::_PD_repoId = "IDL:CF/PropertySet/PartialConfiguration:1.0";
const char* CF::PropertySet::PartialConfiguration::_PD_typeId = "Exception/UserException/CF::PropertySet::PartialConfiguration";

CF::PropertySet::PartialConfiguration* CF::PropertySet::PartialConfiguration::_downcast(::CORBA::Exception* _e) {
  return (PartialConfiguration*) _NP_is_a(_e, _PD_typeId);
}

const CF::PropertySet::PartialConfiguration* CF::PropertySet::PartialConfiguration::_downcast(const ::CORBA::Exception* _e) {
  return (const PartialConfiguration*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::PropertySet::PartialConfiguration::_NP_duplicate() const {
  return new PartialConfiguration(*this);
}

const char* CF::PropertySet::PartialConfiguration::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::PropertySet::PartialConfiguration::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/PropertySet/PartialConfiguration:1.0");
  return _PD_repoId;
}
 
void CF::PropertySet::PartialConfiguration::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::PropertySet::PartialConfiguration::operator>>= (cdrStream& _n) const
{
  (const Properties&) invalidProperties >>= _n;

}

void
CF::PropertySet::PartialConfiguration::operator<<= (cdrStream& _n)
{
  (Properties&)invalidProperties <<= _n;

}

CF::PropertySet_ptr CF::PropertySet_Helper::_nil() {
  return ::CF::PropertySet::_nil();
}

::CORBA::Boolean CF::PropertySet_Helper::is_nil(::CF::PropertySet_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::PropertySet_Helper::release(::CF::PropertySet_ptr p) {
  ::CORBA::release(p);
}

void CF::PropertySet_Helper::marshalObjRef(::CF::PropertySet_ptr obj, cdrStream& s) {
  ::CF::PropertySet::_marshalObjRef(obj, s);
}

CF::PropertySet_ptr CF::PropertySet_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::PropertySet::_unmarshalObjRef(s);
}

void CF::PropertySet_Helper::duplicate(::CF::PropertySet_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::PropertySet_ptr
CF::PropertySet::_duplicate(::CF::PropertySet_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::PropertySet_ptr
CF::PropertySet::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::PropertySet_ptr
CF::PropertySet::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::PropertySet_ptr
CF::PropertySet::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PropertySet _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PropertySet* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_PropertySet;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::PropertySet::_PD_repoId = "IDL:CF/PropertySet:1.0";


CF::_objref_PropertySet::~_objref_PropertySet() {
  
}


CF::_objref_PropertySet::_objref_PropertySet(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::PropertySet::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_PropertySet::_ptrToObjRef(const char* id)
{
  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mProperties_e_cCF_mPropertySet_mInvalidConfiguration_e_cCF_mPropertySet_mPartialConfiguration
class _0RL_cd_23ebd682546aacbd_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_a3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Properties_var arg_0_;
  const CF::Properties* arg_0;
};

void _0RL_cd_23ebd682546aacbd_a3000000::marshalArguments(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_a3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CF::Properties;
  (CF::Properties&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_a3000000::_user_exns[] = {
  CF::PropertySet::InvalidConfiguration::_PD_repoId,
  CF::PropertySet::PartialConfiguration::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_a3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::PropertySet::InvalidConfiguration::_PD_repoId) ) {
    CF::PropertySet::InvalidConfiguration _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::PropertySet::PartialConfiguration::_PD_repoId) ) {
    CF::PropertySet::PartialConfiguration _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_a3000000* tcd = (_0RL_cd_23ebd682546aacbd_a3000000*)cd;
  CF::_impl_PropertySet* impl = (CF::_impl_PropertySet*) svnt->_ptrToInterface(CF::PropertySet::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->configure(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->configure(*tcd->arg_0);
  else {
    try {
      impl->configure(*tcd->arg_0);
    }
    catch(CF::PropertySet::InvalidConfiguration& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::PropertySet::PartialConfiguration& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_PropertySet::configure(const Properties& configProperties)
{
  _0RL_cd_23ebd682546aacbd_a3000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b3000000, "configure", 10);
  _call_desc.arg_0 = &(Properties&) configProperties;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_n_cCF_mProperties_e_cCF_mUnknownProperties
class _0RL_cd_23ebd682546aacbd_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_c3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Properties_var arg_0_;
  CF::Properties* arg_0;
};

void _0RL_cd_23ebd682546aacbd_c3000000::marshalArguments(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_c3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CF::Properties;
  (CF::Properties&)arg_0_ <<= _n;
  arg_0 = &arg_0_.inout();

}

void _0RL_cd_23ebd682546aacbd_c3000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_c3000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::Properties&)*arg_0 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_c3000000::_user_exns[] = {
  CF::UnknownProperties::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_c3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::UnknownProperties::_PD_repoId) ) {
    CF::UnknownProperties _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_c3000000* tcd = (_0RL_cd_23ebd682546aacbd_c3000000*)cd;
  CF::_impl_PropertySet* impl = (CF::_impl_PropertySet*) svnt->_ptrToInterface(CF::PropertySet::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->query(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->query(*tcd->arg_0);
  else {
    try {
      impl->query(*tcd->arg_0);
    }
    catch(CF::UnknownProperties& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_PropertySet::query(Properties& configProperties)
{
  _0RL_cd_23ebd682546aacbd_c3000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d3000000, "query", 6);
  _call_desc.arg_0 = &(Properties&) configProperties;

  _invoke(_call_desc);



}
CF::_pof_PropertySet::~_pof_PropertySet() {}


omniObjRef*
CF::_pof_PropertySet::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_PropertySet(ior, id);
}


::CORBA::Boolean
CF::_pof_PropertySet::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::PropertySet::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_PropertySet _the_pof_CF_mPropertySet;

CF::_impl_PropertySet::~_impl_PropertySet() {}


::CORBA::Boolean
CF::_impl_PropertySet::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "configure") ) {

    _0RL_cd_23ebd682546aacbd_a3000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b3000000, "configure", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "query") ) {

    _0RL_cd_23ebd682546aacbd_c3000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d3000000, "query", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_PropertySet::_ptrToInterface(const char* id)
{
  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_PropertySet::_mostDerivedRepoId()
{
  return ::CF::PropertySet::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::ApplicationInstallationError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::ApplicationInstallationError::insertToAnyFnNCP = 0;

CF::DomainManager::ApplicationInstallationError::ApplicationInstallationError(const CF::DomainManager::ApplicationInstallationError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::DomainManager::ApplicationInstallationError::ApplicationInstallationError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::DomainManager::ApplicationInstallationError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::DomainManager::ApplicationInstallationError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::DomainManager::ApplicationInstallationError& CF::DomainManager::ApplicationInstallationError::operator=(const CF::DomainManager::ApplicationInstallationError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::DomainManager::ApplicationInstallationError::~ApplicationInstallationError() {}

void CF::DomainManager::ApplicationInstallationError::_raise() const { throw *this; }

const char* CF::DomainManager::ApplicationInstallationError::_PD_repoId = "IDL:CF/DomainManager/ApplicationInstallationError:1.0";
const char* CF::DomainManager::ApplicationInstallationError::_PD_typeId = "Exception/UserException/CF::DomainManager::ApplicationInstallationError";

CF::DomainManager::ApplicationInstallationError* CF::DomainManager::ApplicationInstallationError::_downcast(::CORBA::Exception* _e) {
  return (ApplicationInstallationError*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::ApplicationInstallationError* CF::DomainManager::ApplicationInstallationError::_downcast(const ::CORBA::Exception* _e) {
  return (const ApplicationInstallationError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::ApplicationInstallationError::_NP_duplicate() const {
  return new ApplicationInstallationError(*this);
}

const char* CF::DomainManager::ApplicationInstallationError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::ApplicationInstallationError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/ApplicationInstallationError:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::ApplicationInstallationError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::DomainManager::ApplicationInstallationError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::DomainManager::ApplicationInstallationError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::InvalidIdentifier::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::InvalidIdentifier::insertToAnyFnNCP = 0;

CF::DomainManager::InvalidIdentifier::InvalidIdentifier(const CF::DomainManager::InvalidIdentifier& _s) : ::CORBA::UserException(_s)
{
  
}



CF::DomainManager::InvalidIdentifier& CF::DomainManager::InvalidIdentifier::operator=(const CF::DomainManager::InvalidIdentifier& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::DomainManager::InvalidIdentifier::~InvalidIdentifier() {}

void CF::DomainManager::InvalidIdentifier::_raise() const { throw *this; }

const char* CF::DomainManager::InvalidIdentifier::_PD_repoId = "IDL:CF/DomainManager/InvalidIdentifier:1.0";
const char* CF::DomainManager::InvalidIdentifier::_PD_typeId = "Exception/UserException/CF::DomainManager::InvalidIdentifier";

CF::DomainManager::InvalidIdentifier* CF::DomainManager::InvalidIdentifier::_downcast(::CORBA::Exception* _e) {
  return (InvalidIdentifier*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::InvalidIdentifier* CF::DomainManager::InvalidIdentifier::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidIdentifier*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::InvalidIdentifier::_NP_duplicate() const {
  return new InvalidIdentifier(*this);
}

const char* CF::DomainManager::InvalidIdentifier::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::InvalidIdentifier::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/InvalidIdentifier:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::InvalidIdentifier::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::DeviceManagerNotRegistered::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::DeviceManagerNotRegistered::insertToAnyFnNCP = 0;

CF::DomainManager::DeviceManagerNotRegistered::DeviceManagerNotRegistered(const CF::DomainManager::DeviceManagerNotRegistered& _s) : ::CORBA::UserException(_s)
{
  
}



CF::DomainManager::DeviceManagerNotRegistered& CF::DomainManager::DeviceManagerNotRegistered::operator=(const CF::DomainManager::DeviceManagerNotRegistered& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::DomainManager::DeviceManagerNotRegistered::~DeviceManagerNotRegistered() {}

void CF::DomainManager::DeviceManagerNotRegistered::_raise() const { throw *this; }

const char* CF::DomainManager::DeviceManagerNotRegistered::_PD_repoId = "IDL:CF/DomainManager/DeviceManagerNotRegistered:1.0";
const char* CF::DomainManager::DeviceManagerNotRegistered::_PD_typeId = "Exception/UserException/CF::DomainManager::DeviceManagerNotRegistered";

CF::DomainManager::DeviceManagerNotRegistered* CF::DomainManager::DeviceManagerNotRegistered::_downcast(::CORBA::Exception* _e) {
  return (DeviceManagerNotRegistered*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::DeviceManagerNotRegistered* CF::DomainManager::DeviceManagerNotRegistered::_downcast(const ::CORBA::Exception* _e) {
  return (const DeviceManagerNotRegistered*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::DeviceManagerNotRegistered::_NP_duplicate() const {
  return new DeviceManagerNotRegistered(*this);
}

const char* CF::DomainManager::DeviceManagerNotRegistered::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::DeviceManagerNotRegistered::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/DeviceManagerNotRegistered:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::DeviceManagerNotRegistered::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::ApplicationUninstallationError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::ApplicationUninstallationError::insertToAnyFnNCP = 0;

CF::DomainManager::ApplicationUninstallationError::ApplicationUninstallationError(const CF::DomainManager::ApplicationUninstallationError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::DomainManager::ApplicationUninstallationError::ApplicationUninstallationError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::DomainManager::ApplicationUninstallationError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::DomainManager::ApplicationUninstallationError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::DomainManager::ApplicationUninstallationError& CF::DomainManager::ApplicationUninstallationError::operator=(const CF::DomainManager::ApplicationUninstallationError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::DomainManager::ApplicationUninstallationError::~ApplicationUninstallationError() {}

void CF::DomainManager::ApplicationUninstallationError::_raise() const { throw *this; }

const char* CF::DomainManager::ApplicationUninstallationError::_PD_repoId = "IDL:CF/DomainManager/ApplicationUninstallationError:1.0";
const char* CF::DomainManager::ApplicationUninstallationError::_PD_typeId = "Exception/UserException/CF::DomainManager::ApplicationUninstallationError";

CF::DomainManager::ApplicationUninstallationError* CF::DomainManager::ApplicationUninstallationError::_downcast(::CORBA::Exception* _e) {
  return (ApplicationUninstallationError*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::ApplicationUninstallationError* CF::DomainManager::ApplicationUninstallationError::_downcast(const ::CORBA::Exception* _e) {
  return (const ApplicationUninstallationError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::ApplicationUninstallationError::_NP_duplicate() const {
  return new ApplicationUninstallationError(*this);
}

const char* CF::DomainManager::ApplicationUninstallationError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::ApplicationUninstallationError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/ApplicationUninstallationError:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::ApplicationUninstallationError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::DomainManager::ApplicationUninstallationError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::DomainManager::ApplicationUninstallationError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::RegisterError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::RegisterError::insertToAnyFnNCP = 0;

CF::DomainManager::RegisterError::RegisterError(const CF::DomainManager::RegisterError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::DomainManager::RegisterError::RegisterError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::DomainManager::RegisterError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::DomainManager::RegisterError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::DomainManager::RegisterError& CF::DomainManager::RegisterError::operator=(const CF::DomainManager::RegisterError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::DomainManager::RegisterError::~RegisterError() {}

void CF::DomainManager::RegisterError::_raise() const { throw *this; }

const char* CF::DomainManager::RegisterError::_PD_repoId = "IDL:CF/DomainManager/RegisterError:1.0";
const char* CF::DomainManager::RegisterError::_PD_typeId = "Exception/UserException/CF::DomainManager::RegisterError";

CF::DomainManager::RegisterError* CF::DomainManager::RegisterError::_downcast(::CORBA::Exception* _e) {
  return (RegisterError*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::RegisterError* CF::DomainManager::RegisterError::_downcast(const ::CORBA::Exception* _e) {
  return (const RegisterError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::RegisterError::_NP_duplicate() const {
  return new RegisterError(*this);
}

const char* CF::DomainManager::RegisterError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::RegisterError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/RegisterError:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::RegisterError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::DomainManager::RegisterError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::DomainManager::RegisterError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::UnregisterError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::UnregisterError::insertToAnyFnNCP = 0;

CF::DomainManager::UnregisterError::UnregisterError(const CF::DomainManager::UnregisterError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::DomainManager::UnregisterError::UnregisterError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::DomainManager::UnregisterError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::DomainManager::UnregisterError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::DomainManager::UnregisterError& CF::DomainManager::UnregisterError::operator=(const CF::DomainManager::UnregisterError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::DomainManager::UnregisterError::~UnregisterError() {}

void CF::DomainManager::UnregisterError::_raise() const { throw *this; }

const char* CF::DomainManager::UnregisterError::_PD_repoId = "IDL:CF/DomainManager/UnregisterError:1.0";
const char* CF::DomainManager::UnregisterError::_PD_typeId = "Exception/UserException/CF::DomainManager::UnregisterError";

CF::DomainManager::UnregisterError* CF::DomainManager::UnregisterError::_downcast(::CORBA::Exception* _e) {
  return (UnregisterError*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::UnregisterError* CF::DomainManager::UnregisterError::_downcast(const ::CORBA::Exception* _e) {
  return (const UnregisterError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::UnregisterError::_NP_duplicate() const {
  return new UnregisterError(*this);
}

const char* CF::DomainManager::UnregisterError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::UnregisterError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/UnregisterError:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::UnregisterError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::DomainManager::UnregisterError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::DomainManager::UnregisterError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::AlreadyConnected::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::AlreadyConnected::insertToAnyFnNCP = 0;

CF::DomainManager::AlreadyConnected::AlreadyConnected(const CF::DomainManager::AlreadyConnected& _s) : ::CORBA::UserException(_s)
{
  
}



CF::DomainManager::AlreadyConnected& CF::DomainManager::AlreadyConnected::operator=(const CF::DomainManager::AlreadyConnected& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::DomainManager::AlreadyConnected::~AlreadyConnected() {}

void CF::DomainManager::AlreadyConnected::_raise() const { throw *this; }

const char* CF::DomainManager::AlreadyConnected::_PD_repoId = "IDL:CF/DomainManager/AlreadyConnected:1.0";
const char* CF::DomainManager::AlreadyConnected::_PD_typeId = "Exception/UserException/CF::DomainManager::AlreadyConnected";

CF::DomainManager::AlreadyConnected* CF::DomainManager::AlreadyConnected::_downcast(::CORBA::Exception* _e) {
  return (AlreadyConnected*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::AlreadyConnected* CF::DomainManager::AlreadyConnected::_downcast(const ::CORBA::Exception* _e) {
  return (const AlreadyConnected*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::AlreadyConnected::_NP_duplicate() const {
  return new AlreadyConnected(*this);
}

const char* CF::DomainManager::AlreadyConnected::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::AlreadyConnected::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/AlreadyConnected:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::AlreadyConnected::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::InvalidEventChannelName::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::InvalidEventChannelName::insertToAnyFnNCP = 0;

CF::DomainManager::InvalidEventChannelName::InvalidEventChannelName(const CF::DomainManager::InvalidEventChannelName& _s) : ::CORBA::UserException(_s)
{
  
}



CF::DomainManager::InvalidEventChannelName& CF::DomainManager::InvalidEventChannelName::operator=(const CF::DomainManager::InvalidEventChannelName& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::DomainManager::InvalidEventChannelName::~InvalidEventChannelName() {}

void CF::DomainManager::InvalidEventChannelName::_raise() const { throw *this; }

const char* CF::DomainManager::InvalidEventChannelName::_PD_repoId = "IDL:CF/DomainManager/InvalidEventChannelName:1.0";
const char* CF::DomainManager::InvalidEventChannelName::_PD_typeId = "Exception/UserException/CF::DomainManager::InvalidEventChannelName";

CF::DomainManager::InvalidEventChannelName* CF::DomainManager::InvalidEventChannelName::_downcast(::CORBA::Exception* _e) {
  return (InvalidEventChannelName*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::InvalidEventChannelName* CF::DomainManager::InvalidEventChannelName::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidEventChannelName*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::InvalidEventChannelName::_NP_duplicate() const {
  return new InvalidEventChannelName(*this);
}

const char* CF::DomainManager::InvalidEventChannelName::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::InvalidEventChannelName::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/InvalidEventChannelName:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::InvalidEventChannelName::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::DomainManager::NotConnected::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::DomainManager::NotConnected::insertToAnyFnNCP = 0;

CF::DomainManager::NotConnected::NotConnected(const CF::DomainManager::NotConnected& _s) : ::CORBA::UserException(_s)
{
  
}



CF::DomainManager::NotConnected& CF::DomainManager::NotConnected::operator=(const CF::DomainManager::NotConnected& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::DomainManager::NotConnected::~NotConnected() {}

void CF::DomainManager::NotConnected::_raise() const { throw *this; }

const char* CF::DomainManager::NotConnected::_PD_repoId = "IDL:CF/DomainManager/NotConnected:1.0";
const char* CF::DomainManager::NotConnected::_PD_typeId = "Exception/UserException/CF::DomainManager::NotConnected";

CF::DomainManager::NotConnected* CF::DomainManager::NotConnected::_downcast(::CORBA::Exception* _e) {
  return (NotConnected*) _NP_is_a(_e, _PD_typeId);
}

const CF::DomainManager::NotConnected* CF::DomainManager::NotConnected::_downcast(const ::CORBA::Exception* _e) {
  return (const NotConnected*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::DomainManager::NotConnected::_NP_duplicate() const {
  return new NotConnected(*this);
}

const char* CF::DomainManager::NotConnected::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::DomainManager::NotConnected::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/DomainManager/NotConnected:1.0");
  return _PD_repoId;
}
 
void CF::DomainManager::NotConnected::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CF::DomainManager_ptr CF::DomainManager_Helper::_nil() {
  return ::CF::DomainManager::_nil();
}

::CORBA::Boolean CF::DomainManager_Helper::is_nil(::CF::DomainManager_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::DomainManager_Helper::release(::CF::DomainManager_ptr p) {
  ::CORBA::release(p);
}

void CF::DomainManager_Helper::marshalObjRef(::CF::DomainManager_ptr obj, cdrStream& s) {
  ::CF::DomainManager::_marshalObjRef(obj, s);
}

CF::DomainManager_ptr CF::DomainManager_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::DomainManager::_unmarshalObjRef(s);
}

void CF::DomainManager_Helper::duplicate(::CF::DomainManager_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::DomainManager_ptr
CF::DomainManager::_duplicate(::CF::DomainManager_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::DomainManager_ptr
CF::DomainManager::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::DomainManager_ptr
CF::DomainManager::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::DomainManager_ptr
CF::DomainManager::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DomainManager _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DomainManager* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DomainManager;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::DomainManager::_PD_repoId = "IDL:CF/DomainManager:1.0";


CF::_objref_DomainManager::~_objref_DomainManager() {
  
}


CF::_objref_DomainManager::_objref_DomainManager(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::DomainManager::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_PropertySet(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_DomainManager::_ptrToObjRef(const char* id)
{
  if( id == ::CF::DomainManager::_PD_repoId )
    return (::CF::DomainManager_ptr) this;
  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::DomainManager::_PD_repoId) )
    return (::CF::DomainManager_ptr) this;
  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mDevice_i_cCF_mDeviceManager_e_cCF_mDomainManager_mDeviceManagerNotRegistered_e_cCF_mDomainManager_mRegisterError_e_cCF_mInvalidObjectReference_e_cCF_mInvalidProfile
class _0RL_cd_23ebd682546aacbd_e3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_e3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Device_var arg_0_;
  CF::Device_ptr arg_0;
  CF::DeviceManager_var arg_1_;
  CF::DeviceManager_ptr arg_1;
};

void _0RL_cd_23ebd682546aacbd_e3000000::marshalArguments(cdrStream& _n)
{
  CF::Device_Helper::marshalObjRef(arg_0,_n);
  CF::DeviceManager_Helper::marshalObjRef(arg_1,_n);

}

void _0RL_cd_23ebd682546aacbd_e3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CF::Device_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = CF::DeviceManager_Helper::unmarshalObjRef(_n);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_e3000000::_user_exns[] = {
  CF::DomainManager::DeviceManagerNotRegistered::_PD_repoId,
  CF::DomainManager::RegisterError::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId,
  CF::InvalidProfile::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_e3000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::DeviceManagerNotRegistered::_PD_repoId) ) {
    CF::DomainManager::DeviceManagerNotRegistered _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::DomainManager::RegisterError::_PD_repoId) ) {
    CF::DomainManager::RegisterError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidProfile::_PD_repoId) ) {
    CF::InvalidProfile _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_e3000000* tcd = (_0RL_cd_23ebd682546aacbd_e3000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->registerDevice(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->registerDevice(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->registerDevice(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidProfile& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::DeviceManagerNotRegistered& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::RegisterError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::registerDevice(Device_ptr registeringDevice, DeviceManager_ptr registeredDeviceMgr)
{
  _0RL_cd_23ebd682546aacbd_e3000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f3000000, "registerDevice", 15);
  _call_desc.arg_0 = registeringDevice;
  _call_desc.arg_1 = registeredDeviceMgr;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mDeviceManager_e_cCF_mDomainManager_mRegisterError_e_cCF_mInvalidObjectReference_e_cCF_mInvalidProfile
class _0RL_cd_23ebd682546aacbd_04000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_04000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::DeviceManager_var arg_0_;
  CF::DeviceManager_ptr arg_0;
};

void _0RL_cd_23ebd682546aacbd_04000000::marshalArguments(cdrStream& _n)
{
  CF::DeviceManager_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_23ebd682546aacbd_04000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CF::DeviceManager_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_04000000::_user_exns[] = {
  CF::DomainManager::RegisterError::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId,
  CF::InvalidProfile::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_04000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::RegisterError::_PD_repoId) ) {
    CF::DomainManager::RegisterError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidProfile::_PD_repoId) ) {
    CF::InvalidProfile _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_04000000* tcd = (_0RL_cd_23ebd682546aacbd_04000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->registerDeviceManager(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->registerDeviceManager(tcd->arg_0);
  else {
    try {
      impl->registerDeviceManager(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidProfile& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::RegisterError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::registerDeviceManager(DeviceManager_ptr deviceMgr)
{
  _0RL_cd_23ebd682546aacbd_04000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_14000000, "registerDeviceManager", 22);
  _call_desc.arg_0 = deviceMgr;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mDeviceManager_e_cCF_mDomainManager_mUnregisterError_e_cCF_mInvalidObjectReference
class _0RL_cd_23ebd682546aacbd_24000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_24000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::DeviceManager_var arg_0_;
  CF::DeviceManager_ptr arg_0;
};

void _0RL_cd_23ebd682546aacbd_24000000::marshalArguments(cdrStream& _n)
{
  CF::DeviceManager_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_23ebd682546aacbd_24000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CF::DeviceManager_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_24000000::_user_exns[] = {
  CF::DomainManager::UnregisterError::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_24000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::UnregisterError::_PD_repoId) ) {
    CF::DomainManager::UnregisterError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_34000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_24000000* tcd = (_0RL_cd_23ebd682546aacbd_24000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterDeviceManager(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unregisterDeviceManager(tcd->arg_0);
  else {
    try {
      impl->unregisterDeviceManager(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::UnregisterError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::unregisterDeviceManager(DeviceManager_ptr deviceMgr)
{
  _0RL_cd_23ebd682546aacbd_24000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_34000000, "unregisterDeviceManager", 24);
  _call_desc.arg_0 = deviceMgr;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mDevice_e_cCF_mDomainManager_mUnregisterError_e_cCF_mInvalidObjectReference
class _0RL_cd_23ebd682546aacbd_44000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_44000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Device_var arg_0_;
  CF::Device_ptr arg_0;
};

void _0RL_cd_23ebd682546aacbd_44000000::marshalArguments(cdrStream& _n)
{
  CF::Device_Helper::marshalObjRef(arg_0,_n);

}

void _0RL_cd_23ebd682546aacbd_44000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CF::Device_Helper::unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_44000000::_user_exns[] = {
  CF::DomainManager::UnregisterError::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_44000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::UnregisterError::_PD_repoId) ) {
    CF::DomainManager::UnregisterError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_44000000* tcd = (_0RL_cd_23ebd682546aacbd_44000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterDevice(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unregisterDevice(tcd->arg_0);
  else {
    try {
      impl->unregisterDevice(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::UnregisterError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::unregisterDevice(Device_ptr unregisteringDevice)
{
  _0RL_cd_23ebd682546aacbd_44000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_54000000, "unregisterDevice", 17);
  _call_desc.arg_0 = unregisteringDevice;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mDomainManager_mApplicationInstallationError_e_cCF_mInvalidFileName_e_cCF_mInvalidProfile
class _0RL_cd_23ebd682546aacbd_64000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_64000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_64000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_64000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_64000000::_user_exns[] = {
  CF::DomainManager::ApplicationInstallationError::_PD_repoId,
  CF::InvalidFileName::_PD_repoId,
  CF::InvalidProfile::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_64000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::ApplicationInstallationError::_PD_repoId) ) {
    CF::DomainManager::ApplicationInstallationError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidProfile::_PD_repoId) ) {
    CF::InvalidProfile _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_64000000* tcd = (_0RL_cd_23ebd682546aacbd_64000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->installApplication(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->installApplication(tcd->arg_0);
  else {
    try {
      impl->installApplication(tcd->arg_0);
    }
    catch(CF::InvalidProfile& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::ApplicationInstallationError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::installApplication(const char* profileFileName)
{
  _0RL_cd_23ebd682546aacbd_64000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_74000000, "installApplication", 19);
  _call_desc.arg_0 = profileFileName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mDomainManager_mApplicationUninstallationError_e_cCF_mDomainManager_mInvalidIdentifier
class _0RL_cd_23ebd682546aacbd_84000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_84000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_84000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_84000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_84000000::_user_exns[] = {
  CF::DomainManager::ApplicationUninstallationError::_PD_repoId,
  CF::DomainManager::InvalidIdentifier::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_84000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::ApplicationUninstallationError::_PD_repoId) ) {
    CF::DomainManager::ApplicationUninstallationError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::DomainManager::InvalidIdentifier::_PD_repoId) ) {
    CF::DomainManager::InvalidIdentifier _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_84000000* tcd = (_0RL_cd_23ebd682546aacbd_84000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->uninstallApplication(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->uninstallApplication(tcd->arg_0);
  else {
    try {
      impl->uninstallApplication(tcd->arg_0);
    }
    catch(CF::DomainManager::InvalidIdentifier& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::ApplicationUninstallationError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::uninstallApplication(const char* applicationId)
{
  _0RL_cd_23ebd682546aacbd_84000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_94000000, "uninstallApplication", 21);
  _call_desc.arg_0 = applicationId;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mObject_i_cCF_mDeviceManager_i_cstring_e_cCF_mDomainManager_mDeviceManagerNotRegistered_e_cCF_mDomainManager_mRegisterError_e_cCF_mInvalidObjectReference_e_cCF_mInvalidProfile
class _0RL_cd_23ebd682546aacbd_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_a4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::Object_var arg_0_;
  CORBA::Object_ptr arg_0;
  CF::DeviceManager_var arg_1_;
  CF::DeviceManager_ptr arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
};

void _0RL_cd_23ebd682546aacbd_a4000000::marshalArguments(cdrStream& _n)
{
  CORBA::Object::_marshalObjRef(arg_0,_n);
  CF::DeviceManager_Helper::marshalObjRef(arg_1,_n);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_23ebd682546aacbd_a4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CORBA::Object::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = CF::DeviceManager_Helper::unmarshalObjRef(_n);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_a4000000::_user_exns[] = {
  CF::DomainManager::DeviceManagerNotRegistered::_PD_repoId,
  CF::DomainManager::RegisterError::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId,
  CF::InvalidProfile::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_a4000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::DeviceManagerNotRegistered::_PD_repoId) ) {
    CF::DomainManager::DeviceManagerNotRegistered _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::DomainManager::RegisterError::_PD_repoId) ) {
    CF::DomainManager::RegisterError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidProfile::_PD_repoId) ) {
    CF::InvalidProfile _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_a4000000* tcd = (_0RL_cd_23ebd682546aacbd_a4000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->registerService(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->registerService(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->registerService(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidProfile& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::DeviceManagerNotRegistered& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::RegisterError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::registerService(::CORBA::Object_ptr registeringService, DeviceManager_ptr registeredDeviceMgr, const char* name)
{
  _0RL_cd_23ebd682546aacbd_a4000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b4000000, "registerService", 16);
  _call_desc.arg_0 = registeringService;
  _call_desc.arg_1 = registeredDeviceMgr;
  _call_desc.arg_2 = name;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mObject_i_cstring_e_cCF_mDomainManager_mUnregisterError_e_cCF_mInvalidObjectReference
class _0RL_cd_23ebd682546aacbd_c4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_c4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::Object_var arg_0_;
  CORBA::Object_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_23ebd682546aacbd_c4000000::marshalArguments(cdrStream& _n)
{
  CORBA::Object::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_23ebd682546aacbd_c4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CORBA::Object::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_c4000000::_user_exns[] = {
  CF::DomainManager::UnregisterError::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_c4000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::UnregisterError::_PD_repoId) ) {
    CF::DomainManager::UnregisterError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_c4000000* tcd = (_0RL_cd_23ebd682546aacbd_c4000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterService(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->unregisterService(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->unregisterService(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::UnregisterError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::unregisterService(::CORBA::Object_ptr unregisteringService, const char* name)
{
  _0RL_cd_23ebd682546aacbd_c4000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d4000000, "unregisterService", 18);
  _call_desc.arg_0 = unregisteringService;
  _call_desc.arg_1 = name;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mObject_i_cstring_i_cstring_e_cCF_mDomainManager_mAlreadyConnected_e_cCF_mDomainManager_mInvalidEventChannelName_e_cCF_mInvalidObjectReference
class _0RL_cd_23ebd682546aacbd_e4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_e4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::Object_var arg_0_;
  CORBA::Object_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
};

void _0RL_cd_23ebd682546aacbd_e4000000::marshalArguments(cdrStream& _n)
{
  CORBA::Object::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_23ebd682546aacbd_e4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CORBA::Object::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_e4000000::_user_exns[] = {
  CF::DomainManager::AlreadyConnected::_PD_repoId,
  CF::DomainManager::InvalidEventChannelName::_PD_repoId,
  CF::InvalidObjectReference::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_e4000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::AlreadyConnected::_PD_repoId) ) {
    CF::DomainManager::AlreadyConnected _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::DomainManager::InvalidEventChannelName::_PD_repoId) ) {
    CF::DomainManager::InvalidEventChannelName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_e4000000* tcd = (_0RL_cd_23ebd682546aacbd_e4000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->registerWithEventChannel(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->registerWithEventChannel(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->registerWithEventChannel(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::InvalidEventChannelName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::AlreadyConnected& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::registerWithEventChannel(::CORBA::Object_ptr registeringObject, const char* registeringId, const char* eventChannelName)
{
  _0RL_cd_23ebd682546aacbd_e4000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f4000000, "registerWithEventChannel", 25);
  _call_desc.arg_0 = registeringObject;
  _call_desc.arg_1 = registeringId;
  _call_desc.arg_2 = eventChannelName;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_e_cCF_mDomainManager_mInvalidEventChannelName_e_cCF_mDomainManager_mNotConnected
class _0RL_cd_23ebd682546aacbd_05000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_05000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_23ebd682546aacbd_05000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_23ebd682546aacbd_05000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_05000000::_user_exns[] = {
  CF::DomainManager::InvalidEventChannelName::_PD_repoId,
  CF::DomainManager::NotConnected::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_05000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::DomainManager::InvalidEventChannelName::_PD_repoId) ) {
    CF::DomainManager::InvalidEventChannelName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::DomainManager::NotConnected::_PD_repoId) ) {
    CF::DomainManager::NotConnected _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_05000000* tcd = (_0RL_cd_23ebd682546aacbd_05000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterFromEventChannel(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->unregisterFromEventChannel(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->unregisterFromEventChannel(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::DomainManager::InvalidEventChannelName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::DomainManager::NotConnected& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DomainManager::unregisterFromEventChannel(const char* unregisteringId, const char* eventChannelName)
{
  _0RL_cd_23ebd682546aacbd_05000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_15000000, "unregisterFromEventChannel", 27);
  _call_desc.arg_0 = unregisteringId;
  _call_desc.arg_1 = eventChannelName;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_25000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
  tcd->result = impl->domainManagerProfile();


}

char* CF::_objref_DomainManager::domainManagerProfile()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_25000000, "_get_domainManagerProfile", 26);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDomainManager_mDeviceManagerSequence
class _0RL_cd_23ebd682546aacbd_35000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_35000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::DomainManager::DeviceManagerSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_35000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::DomainManager::DeviceManagerSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_35000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::DomainManager::DeviceManagerSequence;
  (CF::DomainManager::DeviceManagerSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_45000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_35000000* tcd = (_0RL_cd_23ebd682546aacbd_35000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
  tcd->result = impl->deviceManagers();


}

CF::DomainManager::DeviceManagerSequence* CF::_objref_DomainManager::deviceManagers()
{
  _0RL_cd_23ebd682546aacbd_35000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_45000000, "_get_deviceManagers", 20);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDomainManager_mApplicationSequence
class _0RL_cd_23ebd682546aacbd_55000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_55000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::DomainManager::ApplicationSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_55000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::DomainManager::ApplicationSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_55000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::DomainManager::ApplicationSequence;
  (CF::DomainManager::ApplicationSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_65000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_55000000* tcd = (_0RL_cd_23ebd682546aacbd_55000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
  tcd->result = impl->applications();


}

CF::DomainManager::ApplicationSequence* CF::_objref_DomainManager::applications()
{
  _0RL_cd_23ebd682546aacbd_55000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_65000000, "_get_applications", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDomainManager_mApplicationFactorySequence
class _0RL_cd_23ebd682546aacbd_75000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_75000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::DomainManager::ApplicationFactorySequence_var result;
};

void _0RL_cd_23ebd682546aacbd_75000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::DomainManager::ApplicationFactorySequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_75000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::DomainManager::ApplicationFactorySequence;
  (CF::DomainManager::ApplicationFactorySequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_85000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_75000000* tcd = (_0RL_cd_23ebd682546aacbd_75000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
  tcd->result = impl->applicationFactories();


}

CF::DomainManager::ApplicationFactorySequence* CF::_objref_DomainManager::applicationFactories()
{
  _0RL_cd_23ebd682546aacbd_75000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_85000000, "_get_applicationFactories", 26);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mFileManager
class _0RL_cd_23ebd682546aacbd_95000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_95000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::FileManager_var result;
};

void _0RL_cd_23ebd682546aacbd_95000000::marshalReturnedValues(cdrStream& _n)
{
  CF::FileManager::_marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_95000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::FileManager::_unmarshalObjRef(_n);

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_a5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_95000000* tcd = (_0RL_cd_23ebd682546aacbd_95000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
  tcd->result = impl->fileMgr();


}

CF::FileManager_ptr CF::_objref_DomainManager::fileMgr()
{
  _0RL_cd_23ebd682546aacbd_95000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a5000000, "_get_fileMgr", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_b5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_DomainManager* impl = (CF::_impl_DomainManager*) svnt->_ptrToInterface(CF::DomainManager::_PD_repoId);
  tcd->result = impl->identifier();


}

char* CF::_objref_DomainManager::identifier()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b5000000, "_get_identifier", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_DomainManager::~_pof_DomainManager() {}


omniObjRef*
CF::_pof_DomainManager::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_DomainManager(ior, id);
}


::CORBA::Boolean
CF::_pof_DomainManager::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::DomainManager::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_DomainManager _the_pof_CF_mDomainManager;

CF::_impl_DomainManager::~_impl_DomainManager() {}


::CORBA::Boolean
CF::_impl_DomainManager::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "registerDevice") ) {

    _0RL_cd_23ebd682546aacbd_e3000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f3000000, "registerDevice", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerDeviceManager") ) {

    _0RL_cd_23ebd682546aacbd_04000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_14000000, "registerDeviceManager", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterDeviceManager") ) {

    _0RL_cd_23ebd682546aacbd_24000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_34000000, "unregisterDeviceManager", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterDevice") ) {

    _0RL_cd_23ebd682546aacbd_44000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_54000000, "unregisterDevice", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "installApplication") ) {

    _0RL_cd_23ebd682546aacbd_64000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_74000000, "installApplication", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "uninstallApplication") ) {

    _0RL_cd_23ebd682546aacbd_84000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_94000000, "uninstallApplication", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerService") ) {

    _0RL_cd_23ebd682546aacbd_a4000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b4000000, "registerService", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterService") ) {

    _0RL_cd_23ebd682546aacbd_c4000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d4000000, "unregisterService", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerWithEventChannel") ) {

    _0RL_cd_23ebd682546aacbd_e4000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f4000000, "registerWithEventChannel", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterFromEventChannel") ) {

    _0RL_cd_23ebd682546aacbd_05000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_15000000, "unregisterFromEventChannel", 27, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_domainManagerProfile") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_25000000, "_get_domainManagerProfile", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_deviceManagers") ) {

    _0RL_cd_23ebd682546aacbd_35000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_45000000, "_get_deviceManagers", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_applications") ) {

    _0RL_cd_23ebd682546aacbd_55000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_65000000, "_get_applications", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_applicationFactories") ) {

    _0RL_cd_23ebd682546aacbd_75000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_85000000, "_get_applicationFactories", 26, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_fileMgr") ) {

    _0RL_cd_23ebd682546aacbd_95000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a5000000, "_get_fileMgr", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_identifier") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b5000000, "_get_identifier", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_PropertySet::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_PropertySet*)this)->
      _impl_PropertySet::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_DomainManager::_ptrToInterface(const char* id)
{
  if( id == ::CF::DomainManager::_PD_repoId )
    return (::CF::_impl_DomainManager*) this;
  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::DomainManager::_PD_repoId) )
    return (::CF::_impl_DomainManager*) this;
  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_DomainManager::_mostDerivedRepoId()
{
  return ::CF::DomainManager::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::ApplicationFactory::CreateApplicationRequestError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ApplicationFactory::CreateApplicationRequestError::insertToAnyFnNCP = 0;

CF::ApplicationFactory::CreateApplicationRequestError::CreateApplicationRequestError(const CF::ApplicationFactory::CreateApplicationRequestError& _s) : ::CORBA::UserException(_s)
{
  invalidAssignments = _s.invalidAssignments;

}

CF::ApplicationFactory::CreateApplicationRequestError::CreateApplicationRequestError(const DeviceAssignmentSequence _invalidAssignments)
{
  pd_insertToAnyFn    = CF::ApplicationFactory::CreateApplicationRequestError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ApplicationFactory::CreateApplicationRequestError::insertToAnyFnNCP;
  invalidAssignments = _invalidAssignments;

}



CF::ApplicationFactory::CreateApplicationRequestError& CF::ApplicationFactory::CreateApplicationRequestError::operator=(const CF::ApplicationFactory::CreateApplicationRequestError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidAssignments = _s.invalidAssignments;

  return *this;
}

CF::ApplicationFactory::CreateApplicationRequestError::~CreateApplicationRequestError() {}

void CF::ApplicationFactory::CreateApplicationRequestError::_raise() const { throw *this; }

const char* CF::ApplicationFactory::CreateApplicationRequestError::_PD_repoId = "IDL:CF/ApplicationFactory/CreateApplicationRequestError:1.0";
const char* CF::ApplicationFactory::CreateApplicationRequestError::_PD_typeId = "Exception/UserException/CF::ApplicationFactory::CreateApplicationRequestError";

CF::ApplicationFactory::CreateApplicationRequestError* CF::ApplicationFactory::CreateApplicationRequestError::_downcast(::CORBA::Exception* _e) {
  return (CreateApplicationRequestError*) _NP_is_a(_e, _PD_typeId);
}

const CF::ApplicationFactory::CreateApplicationRequestError* CF::ApplicationFactory::CreateApplicationRequestError::_downcast(const ::CORBA::Exception* _e) {
  return (const CreateApplicationRequestError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ApplicationFactory::CreateApplicationRequestError::_NP_duplicate() const {
  return new CreateApplicationRequestError(*this);
}

const char* CF::ApplicationFactory::CreateApplicationRequestError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ApplicationFactory::CreateApplicationRequestError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ApplicationFactory/CreateApplicationRequestError:1.0");
  return _PD_repoId;
}
 
void CF::ApplicationFactory::CreateApplicationRequestError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ApplicationFactory::CreateApplicationRequestError::operator>>= (cdrStream& _n) const
{
  (const DeviceAssignmentSequence&) invalidAssignments >>= _n;

}

void
CF::ApplicationFactory::CreateApplicationRequestError::operator<<= (cdrStream& _n)
{
  (DeviceAssignmentSequence&)invalidAssignments <<= _n;

}

::CORBA::Exception::insertExceptionToAny CF::ApplicationFactory::CreateApplicationError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ApplicationFactory::CreateApplicationError::insertToAnyFnNCP = 0;

CF::ApplicationFactory::CreateApplicationError::CreateApplicationError(const CF::ApplicationFactory::CreateApplicationError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::ApplicationFactory::CreateApplicationError::CreateApplicationError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::ApplicationFactory::CreateApplicationError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ApplicationFactory::CreateApplicationError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::ApplicationFactory::CreateApplicationError& CF::ApplicationFactory::CreateApplicationError::operator=(const CF::ApplicationFactory::CreateApplicationError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::ApplicationFactory::CreateApplicationError::~CreateApplicationError() {}

void CF::ApplicationFactory::CreateApplicationError::_raise() const { throw *this; }

const char* CF::ApplicationFactory::CreateApplicationError::_PD_repoId = "IDL:CF/ApplicationFactory/CreateApplicationError:1.0";
const char* CF::ApplicationFactory::CreateApplicationError::_PD_typeId = "Exception/UserException/CF::ApplicationFactory::CreateApplicationError";

CF::ApplicationFactory::CreateApplicationError* CF::ApplicationFactory::CreateApplicationError::_downcast(::CORBA::Exception* _e) {
  return (CreateApplicationError*) _NP_is_a(_e, _PD_typeId);
}

const CF::ApplicationFactory::CreateApplicationError* CF::ApplicationFactory::CreateApplicationError::_downcast(const ::CORBA::Exception* _e) {
  return (const CreateApplicationError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ApplicationFactory::CreateApplicationError::_NP_duplicate() const {
  return new CreateApplicationError(*this);
}

const char* CF::ApplicationFactory::CreateApplicationError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ApplicationFactory::CreateApplicationError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ApplicationFactory/CreateApplicationError:1.0");
  return _PD_repoId;
}
 
void CF::ApplicationFactory::CreateApplicationError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ApplicationFactory::CreateApplicationError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::ApplicationFactory::CreateApplicationError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::ApplicationFactory::InvalidInitConfiguration::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ApplicationFactory::InvalidInitConfiguration::insertToAnyFnNCP = 0;

CF::ApplicationFactory::InvalidInitConfiguration::InvalidInitConfiguration(const CF::ApplicationFactory::InvalidInitConfiguration& _s) : ::CORBA::UserException(_s)
{
  invalidProperties = _s.invalidProperties;

}

CF::ApplicationFactory::InvalidInitConfiguration::InvalidInitConfiguration(const Properties _invalidProperties)
{
  pd_insertToAnyFn    = CF::ApplicationFactory::InvalidInitConfiguration::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ApplicationFactory::InvalidInitConfiguration::insertToAnyFnNCP;
  invalidProperties = _invalidProperties;

}



CF::ApplicationFactory::InvalidInitConfiguration& CF::ApplicationFactory::InvalidInitConfiguration::operator=(const CF::ApplicationFactory::InvalidInitConfiguration& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidProperties = _s.invalidProperties;

  return *this;
}

CF::ApplicationFactory::InvalidInitConfiguration::~InvalidInitConfiguration() {}

void CF::ApplicationFactory::InvalidInitConfiguration::_raise() const { throw *this; }

const char* CF::ApplicationFactory::InvalidInitConfiguration::_PD_repoId = "IDL:CF/ApplicationFactory/InvalidInitConfiguration:1.0";
const char* CF::ApplicationFactory::InvalidInitConfiguration::_PD_typeId = "Exception/UserException/CF::ApplicationFactory::InvalidInitConfiguration";

CF::ApplicationFactory::InvalidInitConfiguration* CF::ApplicationFactory::InvalidInitConfiguration::_downcast(::CORBA::Exception* _e) {
  return (InvalidInitConfiguration*) _NP_is_a(_e, _PD_typeId);
}

const CF::ApplicationFactory::InvalidInitConfiguration* CF::ApplicationFactory::InvalidInitConfiguration::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidInitConfiguration*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ApplicationFactory::InvalidInitConfiguration::_NP_duplicate() const {
  return new InvalidInitConfiguration(*this);
}

const char* CF::ApplicationFactory::InvalidInitConfiguration::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ApplicationFactory::InvalidInitConfiguration::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ApplicationFactory/InvalidInitConfiguration:1.0");
  return _PD_repoId;
}
 
void CF::ApplicationFactory::InvalidInitConfiguration::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ApplicationFactory::InvalidInitConfiguration::operator>>= (cdrStream& _n) const
{
  (const Properties&) invalidProperties >>= _n;

}

void
CF::ApplicationFactory::InvalidInitConfiguration::operator<<= (cdrStream& _n)
{
  (Properties&)invalidProperties <<= _n;

}

CF::ApplicationFactory_ptr CF::ApplicationFactory_Helper::_nil() {
  return ::CF::ApplicationFactory::_nil();
}

::CORBA::Boolean CF::ApplicationFactory_Helper::is_nil(::CF::ApplicationFactory_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::ApplicationFactory_Helper::release(::CF::ApplicationFactory_ptr p) {
  ::CORBA::release(p);
}

void CF::ApplicationFactory_Helper::marshalObjRef(::CF::ApplicationFactory_ptr obj, cdrStream& s) {
  ::CF::ApplicationFactory::_marshalObjRef(obj, s);
}

CF::ApplicationFactory_ptr CF::ApplicationFactory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::ApplicationFactory::_unmarshalObjRef(s);
}

void CF::ApplicationFactory_Helper::duplicate(::CF::ApplicationFactory_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::ApplicationFactory_ptr
CF::ApplicationFactory::_duplicate(::CF::ApplicationFactory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::ApplicationFactory_ptr
CF::ApplicationFactory::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::ApplicationFactory_ptr
CF::ApplicationFactory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::ApplicationFactory_ptr
CF::ApplicationFactory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ApplicationFactory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ApplicationFactory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ApplicationFactory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::ApplicationFactory::_PD_repoId = "IDL:CF/ApplicationFactory:1.0";


CF::_objref_ApplicationFactory::~_objref_ApplicationFactory() {
  
}


CF::_objref_ApplicationFactory::_objref_ApplicationFactory(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::ApplicationFactory::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_ApplicationFactory::_ptrToObjRef(const char* id)
{
  if( id == ::CF::ApplicationFactory::_PD_repoId )
    return (::CF::ApplicationFactory_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::ApplicationFactory::_PD_repoId) )
    return (::CF::ApplicationFactory_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCF_mApplication_i_cstring_i_cCF_mProperties_i_cCF_mDeviceAssignmentSequence_e_cCF_mApplicationFactory_mCreateApplicationError_e_cCF_mApplicationFactory_mCreateApplicationRequestError_e_cCF_mApplicationFactory_mInvalidInitConfiguration
class _0RL_cd_23ebd682546aacbd_c5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_c5000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CF::Properties_var arg_1_;
  const CF::Properties* arg_1;
  CF::DeviceAssignmentSequence_var arg_2_;
  const CF::DeviceAssignmentSequence* arg_2;
  CF::Application_var result;
};

void _0RL_cd_23ebd682546aacbd_c5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const CF::Properties&) *arg_1 >>= _n;
  (const CF::DeviceAssignmentSequence&) *arg_2 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_c5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new CF::Properties;
  (CF::Properties&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new CF::DeviceAssignmentSequence;
  (CF::DeviceAssignmentSequence&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_23ebd682546aacbd_c5000000::marshalReturnedValues(cdrStream& _n)
{
  CF::Application_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_c5000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::Application_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_23ebd682546aacbd_c5000000::_user_exns[] = {
  CF::ApplicationFactory::CreateApplicationError::_PD_repoId,
  CF::ApplicationFactory::CreateApplicationRequestError::_PD_repoId,
  CF::ApplicationFactory::InvalidInitConfiguration::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_c5000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::ApplicationFactory::CreateApplicationError::_PD_repoId) ) {
    CF::ApplicationFactory::CreateApplicationError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ApplicationFactory::CreateApplicationRequestError::_PD_repoId) ) {
    CF::ApplicationFactory::CreateApplicationRequestError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ApplicationFactory::InvalidInitConfiguration::_PD_repoId) ) {
    CF::ApplicationFactory::InvalidInitConfiguration _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_d5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_c5000000* tcd = (_0RL_cd_23ebd682546aacbd_c5000000*)cd;
  CF::_impl_ApplicationFactory* impl = (CF::_impl_ApplicationFactory*) svnt->_ptrToInterface(CF::ApplicationFactory::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->create(tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->create(tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
  else {
    try {
      tcd->result = impl->create(tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
    }
    catch(CF::ApplicationFactory::CreateApplicationError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::ApplicationFactory::CreateApplicationRequestError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::ApplicationFactory::InvalidInitConfiguration& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CF::Application_ptr CF::_objref_ApplicationFactory::create(const char* name, const Properties& initConfiguration, const DeviceAssignmentSequence& deviceAssignments)
{
  _0RL_cd_23ebd682546aacbd_c5000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d5000000, "create", 7);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(Properties&) initConfiguration;
  _call_desc.arg_2 = &(DeviceAssignmentSequence&) deviceAssignments;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_e5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_ApplicationFactory* impl = (CF::_impl_ApplicationFactory*) svnt->_ptrToInterface(CF::ApplicationFactory::_PD_repoId);
  tcd->result = impl->name();


}

char* CF::_objref_ApplicationFactory::name()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e5000000, "_get_name", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_ApplicationFactory* impl = (CF::_impl_ApplicationFactory*) svnt->_ptrToInterface(CF::ApplicationFactory::_PD_repoId);
  tcd->result = impl->identifier();


}

char* CF::_objref_ApplicationFactory::identifier()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f5000000, "_get_identifier", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_06000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_ApplicationFactory* impl = (CF::_impl_ApplicationFactory*) svnt->_ptrToInterface(CF::ApplicationFactory::_PD_repoId);
  tcd->result = impl->softwareProfile();


}

char* CF::_objref_ApplicationFactory::softwareProfile()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_06000000, "_get_softwareProfile", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_ApplicationFactory::~_pof_ApplicationFactory() {}


omniObjRef*
CF::_pof_ApplicationFactory::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_ApplicationFactory(ior, id);
}


::CORBA::Boolean
CF::_pof_ApplicationFactory::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::ApplicationFactory::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_ApplicationFactory _the_pof_CF_mApplicationFactory;

CF::_impl_ApplicationFactory::~_impl_ApplicationFactory() {}


::CORBA::Boolean
CF::_impl_ApplicationFactory::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "create") ) {

    _0RL_cd_23ebd682546aacbd_c5000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d5000000, "create", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_name") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e5000000, "_get_name", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_identifier") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f5000000, "_get_identifier", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_softwareProfile") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_06000000, "_get_softwareProfile", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_ApplicationFactory::_ptrToInterface(const char* id)
{
  if( id == ::CF::ApplicationFactory::_PD_repoId )
    return (::CF::_impl_ApplicationFactory*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::ApplicationFactory::_PD_repoId) )
    return (::CF::_impl_ApplicationFactory*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_ApplicationFactory::_mostDerivedRepoId()
{
  return ::CF::ApplicationFactory::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::PortSupplier::UnknownPort::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::PortSupplier::UnknownPort::insertToAnyFnNCP = 0;

CF::PortSupplier::UnknownPort::UnknownPort(const CF::PortSupplier::UnknownPort& _s) : ::CORBA::UserException(_s)
{
  
}



CF::PortSupplier::UnknownPort& CF::PortSupplier::UnknownPort::operator=(const CF::PortSupplier::UnknownPort& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::PortSupplier::UnknownPort::~UnknownPort() {}

void CF::PortSupplier::UnknownPort::_raise() const { throw *this; }

const char* CF::PortSupplier::UnknownPort::_PD_repoId = "IDL:CF/PortSupplier/UnknownPort:1.0";
const char* CF::PortSupplier::UnknownPort::_PD_typeId = "Exception/UserException/CF::PortSupplier::UnknownPort";

CF::PortSupplier::UnknownPort* CF::PortSupplier::UnknownPort::_downcast(::CORBA::Exception* _e) {
  return (UnknownPort*) _NP_is_a(_e, _PD_typeId);
}

const CF::PortSupplier::UnknownPort* CF::PortSupplier::UnknownPort::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownPort*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::PortSupplier::UnknownPort::_NP_duplicate() const {
  return new UnknownPort(*this);
}

const char* CF::PortSupplier::UnknownPort::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::PortSupplier::UnknownPort::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/PortSupplier/UnknownPort:1.0");
  return _PD_repoId;
}
 
void CF::PortSupplier::UnknownPort::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

CF::PortSupplier_ptr CF::PortSupplier_Helper::_nil() {
  return ::CF::PortSupplier::_nil();
}

::CORBA::Boolean CF::PortSupplier_Helper::is_nil(::CF::PortSupplier_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::PortSupplier_Helper::release(::CF::PortSupplier_ptr p) {
  ::CORBA::release(p);
}

void CF::PortSupplier_Helper::marshalObjRef(::CF::PortSupplier_ptr obj, cdrStream& s) {
  ::CF::PortSupplier::_marshalObjRef(obj, s);
}

CF::PortSupplier_ptr CF::PortSupplier_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::PortSupplier::_unmarshalObjRef(s);
}

void CF::PortSupplier_Helper::duplicate(::CF::PortSupplier_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::PortSupplier_ptr
CF::PortSupplier::_duplicate(::CF::PortSupplier_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::PortSupplier_ptr
CF::PortSupplier::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::PortSupplier_ptr
CF::PortSupplier::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::PortSupplier_ptr
CF::PortSupplier::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PortSupplier _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PortSupplier* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_PortSupplier;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::PortSupplier::_PD_repoId = "IDL:CF/PortSupplier:1.0";


CF::_objref_PortSupplier::~_objref_PortSupplier() {
  
}


CF::_objref_PortSupplier::_objref_PortSupplier(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::PortSupplier::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
CF::_objref_PortSupplier::_ptrToObjRef(const char* id)
{
  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCORBA_mObject_i_cstring_e_cCF_mPortSupplier_mUnknownPort
class _0RL_cd_23ebd682546aacbd_16000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_16000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CORBA::Object_var result;
};

void _0RL_cd_23ebd682546aacbd_16000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_16000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_23ebd682546aacbd_16000000::marshalReturnedValues(cdrStream& _n)
{
  CORBA::Object::_marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_16000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CORBA::Object::_unmarshalObjRef(_n);

}

const char* const _0RL_cd_23ebd682546aacbd_16000000::_user_exns[] = {
  CF::PortSupplier::UnknownPort::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_16000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::PortSupplier::UnknownPort::_PD_repoId) ) {
    CF::PortSupplier::UnknownPort _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_26000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_16000000* tcd = (_0RL_cd_23ebd682546aacbd_16000000*)cd;
  CF::_impl_PortSupplier* impl = (CF::_impl_PortSupplier*) svnt->_ptrToInterface(CF::PortSupplier::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getPort(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getPort(tcd->arg_0);
  else {
    try {
      tcd->result = impl->getPort(tcd->arg_0);
    }
    catch(CF::PortSupplier::UnknownPort& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CORBA::Object_ptr CF::_objref_PortSupplier::getPort(const char* name)
{
  _0RL_cd_23ebd682546aacbd_16000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_26000000, "getPort", 8);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_PortSupplier::~_pof_PortSupplier() {}


omniObjRef*
CF::_pof_PortSupplier::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_PortSupplier(ior, id);
}


::CORBA::Boolean
CF::_pof_PortSupplier::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return 1;
  
  return 0;
}

const CF::_pof_PortSupplier _the_pof_CF_mPortSupplier;

CF::_impl_PortSupplier::~_impl_PortSupplier() {}


::CORBA::Boolean
CF::_impl_PortSupplier::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getPort") ) {

    _0RL_cd_23ebd682546aacbd_16000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_26000000, "getPort", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
CF::_impl_PortSupplier::_ptrToInterface(const char* id)
{
  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_PortSupplier::_mostDerivedRepoId()
{
  return ::CF::PortSupplier::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::Resource::StartError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::Resource::StartError::insertToAnyFnNCP = 0;

CF::Resource::StartError::StartError(const CF::Resource::StartError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::Resource::StartError::StartError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::Resource::StartError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::Resource::StartError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::Resource::StartError& CF::Resource::StartError::operator=(const CF::Resource::StartError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::Resource::StartError::~StartError() {}

void CF::Resource::StartError::_raise() const { throw *this; }

const char* CF::Resource::StartError::_PD_repoId = "IDL:CF/Resource/StartError:1.0";
const char* CF::Resource::StartError::_PD_typeId = "Exception/UserException/CF::Resource::StartError";

CF::Resource::StartError* CF::Resource::StartError::_downcast(::CORBA::Exception* _e) {
  return (StartError*) _NP_is_a(_e, _PD_typeId);
}

const CF::Resource::StartError* CF::Resource::StartError::_downcast(const ::CORBA::Exception* _e) {
  return (const StartError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::Resource::StartError::_NP_duplicate() const {
  return new StartError(*this);
}

const char* CF::Resource::StartError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::Resource::StartError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/Resource/StartError:1.0");
  return _PD_repoId;
}
 
void CF::Resource::StartError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::Resource::StartError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::Resource::StartError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::Resource::StopError::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::Resource::StopError::insertToAnyFnNCP = 0;

CF::Resource::StopError::StopError(const CF::Resource::StopError& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::Resource::StopError::StopError(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::Resource::StopError::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::Resource::StopError::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::Resource::StopError& CF::Resource::StopError::operator=(const CF::Resource::StopError& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::Resource::StopError::~StopError() {}

void CF::Resource::StopError::_raise() const { throw *this; }

const char* CF::Resource::StopError::_PD_repoId = "IDL:CF/Resource/StopError:1.0";
const char* CF::Resource::StopError::_PD_typeId = "Exception/UserException/CF::Resource::StopError";

CF::Resource::StopError* CF::Resource::StopError::_downcast(::CORBA::Exception* _e) {
  return (StopError*) _NP_is_a(_e, _PD_typeId);
}

const CF::Resource::StopError* CF::Resource::StopError::_downcast(const ::CORBA::Exception* _e) {
  return (const StopError*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::Resource::StopError::_NP_duplicate() const {
  return new StopError(*this);
}

const char* CF::Resource::StopError::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::Resource::StopError::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/Resource/StopError:1.0");
  return _PD_repoId;
}
 
void CF::Resource::StopError::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::Resource::StopError::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::Resource::StopError::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

CF::Resource_ptr CF::Resource_Helper::_nil() {
  return ::CF::Resource::_nil();
}

::CORBA::Boolean CF::Resource_Helper::is_nil(::CF::Resource_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::Resource_Helper::release(::CF::Resource_ptr p) {
  ::CORBA::release(p);
}

void CF::Resource_Helper::marshalObjRef(::CF::Resource_ptr obj, cdrStream& s) {
  ::CF::Resource::_marshalObjRef(obj, s);
}

CF::Resource_ptr CF::Resource_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::Resource::_unmarshalObjRef(s);
}

void CF::Resource_Helper::duplicate(::CF::Resource_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::Resource_ptr
CF::Resource::_duplicate(::CF::Resource_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::Resource_ptr
CF::Resource::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::Resource_ptr
CF::Resource::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::Resource_ptr
CF::Resource::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Resource _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Resource* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Resource;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::Resource::_PD_repoId = "IDL:CF/Resource:1.0";


CF::_objref_Resource::~_objref_Resource() {
  
}


CF::_objref_Resource::_objref_Resource(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::Resource::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_LifeCycle(ior, id),
   OMNIORB_BASE_CTOR(CF::)_objref_TestableObject(ior, id),
   OMNIORB_BASE_CTOR(CF::)_objref_PropertySet(ior, id),
   OMNIORB_BASE_CTOR(CF::)_objref_PortSupplier(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_Resource::_ptrToObjRef(const char* id)
{
  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::Resource_ptr) this;
  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::LifeCycle_ptr) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::TestableObject_ptr) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::Resource_ptr) this;
  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::LifeCycle_ptr) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::TestableObject_ptr) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_e_cCF_mResource_mStartError
class _0RL_cd_23ebd682546aacbd_36000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_36000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23ebd682546aacbd_36000000::_user_exns[] = {
  CF::Resource::StartError::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_36000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Resource::StartError::_PD_repoId) ) {
    CF::Resource::StartError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_46000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  CF::_impl_Resource* impl = (CF::_impl_Resource*) svnt->_ptrToInterface(CF::Resource::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->start();
#else
  if (!cd->is_upcall())
    impl->start();
  else {
    try {
      impl->start();
    }
    catch(CF::Resource::StartError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_Resource::start()
{
  _0RL_cd_23ebd682546aacbd_36000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_46000000, "start", 6);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_e_cCF_mResource_mStopError
class _0RL_cd_23ebd682546aacbd_56000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_56000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_23ebd682546aacbd_56000000::_user_exns[] = {
  CF::Resource::StopError::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_56000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Resource::StopError::_PD_repoId) ) {
    CF::Resource::StopError _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_66000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  CF::_impl_Resource* impl = (CF::_impl_Resource*) svnt->_ptrToInterface(CF::Resource::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->stop();
#else
  if (!cd->is_upcall())
    impl->stop();
  else {
    try {
      impl->stop();
    }
    catch(CF::Resource::StopError& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_Resource::stop()
{
  _0RL_cd_23ebd682546aacbd_56000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_66000000, "stop", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_76000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_Resource* impl = (CF::_impl_Resource*) svnt->_ptrToInterface(CF::Resource::_PD_repoId);
  tcd->result = impl->identifier();


}

char* CF::_objref_Resource::identifier()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_76000000, "_get_identifier", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_Resource::~_pof_Resource() {}


omniObjRef*
CF::_pof_Resource::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_Resource(ior, id);
}


::CORBA::Boolean
CF::_pof_Resource::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::Resource::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::LifeCycle::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::TestableObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PortSupplier::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_Resource _the_pof_CF_mResource;

CF::_impl_Resource::~_impl_Resource() {}


::CORBA::Boolean
CF::_impl_Resource::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "start") ) {

    _0RL_cd_23ebd682546aacbd_36000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_46000000, "start", 6, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stop") ) {

    _0RL_cd_23ebd682546aacbd_56000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_66000000, "stop", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_identifier") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_76000000, "_get_identifier", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_LifeCycle::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LifeCycle*)this)->
      _impl_LifeCycle::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_TestableObject::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_TestableObject*)this)->
      _impl_TestableObject::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_PropertySet::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_PropertySet*)this)->
      _impl_PropertySet::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_PortSupplier::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_PortSupplier*)this)->
      _impl_PortSupplier::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_Resource::_ptrToInterface(const char* id)
{
  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::_impl_Resource*) this;
  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::_impl_LifeCycle*) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::_impl_TestableObject*) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::_impl_Resource*) this;
  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::_impl_LifeCycle*) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::_impl_TestableObject*) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_Resource::_mostDerivedRepoId()
{
  return ::CF::Resource::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::Device::InvalidState::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::Device::InvalidState::insertToAnyFnNCP = 0;

CF::Device::InvalidState::InvalidState(const CF::Device::InvalidState& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;

}

CF::Device::InvalidState::InvalidState(const char* _msg)
{
  pd_insertToAnyFn    = CF::Device::InvalidState::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::Device::InvalidState::insertToAnyFnNCP;
  msg = _msg;

}



CF::Device::InvalidState& CF::Device::InvalidState::operator=(const CF::Device::InvalidState& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;

  return *this;
}

CF::Device::InvalidState::~InvalidState() {}

void CF::Device::InvalidState::_raise() const { throw *this; }

const char* CF::Device::InvalidState::_PD_repoId = "IDL:CF/Device/InvalidState:1.0";
const char* CF::Device::InvalidState::_PD_typeId = "Exception/UserException/CF::Device::InvalidState";

CF::Device::InvalidState* CF::Device::InvalidState::_downcast(::CORBA::Exception* _e) {
  return (InvalidState*) _NP_is_a(_e, _PD_typeId);
}

const CF::Device::InvalidState* CF::Device::InvalidState::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidState*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::Device::InvalidState::_NP_duplicate() const {
  return new InvalidState(*this);
}

const char* CF::Device::InvalidState::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::Device::InvalidState::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/Device/InvalidState:1.0");
  return _PD_repoId;
}
 
void CF::Device::InvalidState::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::Device::InvalidState::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);

}

void
CF::Device::InvalidState::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::Device::InvalidCapacity::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::Device::InvalidCapacity::insertToAnyFnNCP = 0;

CF::Device::InvalidCapacity::InvalidCapacity(const CF::Device::InvalidCapacity& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;
  capacities = _s.capacities;

}

CF::Device::InvalidCapacity::InvalidCapacity(const char* _msg, const Properties _capacities)
{
  pd_insertToAnyFn    = CF::Device::InvalidCapacity::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::Device::InvalidCapacity::insertToAnyFnNCP;
  msg = _msg;
  capacities = _capacities;

}



CF::Device::InvalidCapacity& CF::Device::InvalidCapacity::operator=(const CF::Device::InvalidCapacity& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;
  capacities = _s.capacities;

  return *this;
}

CF::Device::InvalidCapacity::~InvalidCapacity() {}

void CF::Device::InvalidCapacity::_raise() const { throw *this; }

const char* CF::Device::InvalidCapacity::_PD_repoId = "IDL:CF/Device/InvalidCapacity:1.0";
const char* CF::Device::InvalidCapacity::_PD_typeId = "Exception/UserException/CF::Device::InvalidCapacity";

CF::Device::InvalidCapacity* CF::Device::InvalidCapacity::_downcast(::CORBA::Exception* _e) {
  return (InvalidCapacity*) _NP_is_a(_e, _PD_typeId);
}

const CF::Device::InvalidCapacity* CF::Device::InvalidCapacity::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidCapacity*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::Device::InvalidCapacity::_NP_duplicate() const {
  return new InvalidCapacity(*this);
}

const char* CF::Device::InvalidCapacity::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::Device::InvalidCapacity::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/Device/InvalidCapacity:1.0");
  return _PD_repoId;
}
 
void CF::Device::InvalidCapacity::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::Device::InvalidCapacity::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);
  (const Properties&) capacities >>= _n;

}

void
CF::Device::InvalidCapacity::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);
  (Properties&)capacities <<= _n;

}

CF::Device_ptr CF::Device_Helper::_nil() {
  return ::CF::Device::_nil();
}

::CORBA::Boolean CF::Device_Helper::is_nil(::CF::Device_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::Device_Helper::release(::CF::Device_ptr p) {
  ::CORBA::release(p);
}

void CF::Device_Helper::marshalObjRef(::CF::Device_ptr obj, cdrStream& s) {
  ::CF::Device::_marshalObjRef(obj, s);
}

CF::Device_ptr CF::Device_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::Device::_unmarshalObjRef(s);
}

void CF::Device_Helper::duplicate(::CF::Device_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::Device_ptr
CF::Device::_duplicate(::CF::Device_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::Device_ptr
CF::Device::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::Device_ptr
CF::Device::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::Device_ptr
CF::Device::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Device _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Device* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Device;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::Device::_PD_repoId = "IDL:CF/Device:1.0";


CF::_objref_Device::~_objref_Device() {
  
}


CF::_objref_Device::_objref_Device(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::Device::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_Resource(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_Device::_ptrToObjRef(const char* id)
{
  if( id == ::CF::Device::_PD_repoId )
    return (::CF::Device_ptr) this;
  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::Resource_ptr) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::LifeCycle_ptr) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::TestableObject_ptr) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::Device::_PD_repoId) )
    return (::CF::Device_ptr) this;
  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::Resource_ptr) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::LifeCycle_ptr) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::TestableObject_ptr) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cCF_mProperties_e_cCF_mDevice_mInvalidCapacity_e_cCF_mDevice_mInvalidState
class _0RL_cd_23ebd682546aacbd_86000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_86000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Properties_var arg_0_;
  const CF::Properties* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_23ebd682546aacbd_86000000::marshalArguments(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_86000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CF::Properties;
  (CF::Properties&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_23ebd682546aacbd_86000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_23ebd682546aacbd_86000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_23ebd682546aacbd_86000000::_user_exns[] = {
  CF::Device::InvalidCapacity::_PD_repoId,
  CF::Device::InvalidState::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_86000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Device::InvalidCapacity::_PD_repoId) ) {
    CF::Device::InvalidCapacity _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::Device::InvalidState::_PD_repoId) ) {
    CF::Device::InvalidState _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_96000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_86000000* tcd = (_0RL_cd_23ebd682546aacbd_86000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->allocateCapacity(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->allocateCapacity(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->allocateCapacity(*tcd->arg_0);
    }
    catch(CF::Device::InvalidCapacity& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::Device::InvalidState& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean CF::_objref_Device::allocateCapacity(const Properties& capacities)
{
  _0RL_cd_23ebd682546aacbd_86000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_96000000, "allocateCapacity", 17);
  _call_desc.arg_0 = &(Properties&) capacities;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mProperties_e_cCF_mDevice_mInvalidCapacity_e_cCF_mDevice_mInvalidState
class _0RL_cd_23ebd682546aacbd_a6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_a6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::Properties_var arg_0_;
  const CF::Properties* arg_0;
};

void _0RL_cd_23ebd682546aacbd_a6000000::marshalArguments(cdrStream& _n)
{
  (const CF::Properties&) *arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_a6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CF::Properties;
  (CF::Properties&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_a6000000::_user_exns[] = {
  CF::Device::InvalidCapacity::_PD_repoId,
  CF::Device::InvalidState::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_a6000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Device::InvalidCapacity::_PD_repoId) ) {
    CF::Device::InvalidCapacity _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::Device::InvalidState::_PD_repoId) ) {
    CF::Device::InvalidState _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_b6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_a6000000* tcd = (_0RL_cd_23ebd682546aacbd_a6000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->deallocateCapacity(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->deallocateCapacity(*tcd->arg_0);
  else {
    try {
      impl->deallocateCapacity(*tcd->arg_0);
    }
    catch(CF::Device::InvalidCapacity& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::Device::InvalidState& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_Device::deallocateCapacity(const Properties& capacities)
{
  _0RL_cd_23ebd682546aacbd_a6000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b6000000, "deallocateCapacity", 19);
  _call_desc.arg_0 = &(Properties&) capacities;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDevice_mUsageType
class _0RL_cd_23ebd682546aacbd_c6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_c6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::Device::UsageType result;
};

void _0RL_cd_23ebd682546aacbd_c6000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_c6000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::Device::UsageType&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_d6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_c6000000* tcd = (_0RL_cd_23ebd682546aacbd_c6000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  tcd->result = impl->usageState();


}

CF::Device::UsageType CF::_objref_Device::usageState()
{
  _0RL_cd_23ebd682546aacbd_c6000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d6000000, "_get_usageState", 16);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDevice_mAdminType
class _0RL_cd_23ebd682546aacbd_e6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_e6000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::Device::AdminType result;
};

void _0RL_cd_23ebd682546aacbd_e6000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_e6000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::Device::AdminType&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_e6000000* tcd = (_0RL_cd_23ebd682546aacbd_e6000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  tcd->result = impl->adminState();


}

CF::Device::AdminType CF::_objref_Device::adminState()
{
  _0RL_cd_23ebd682546aacbd_e6000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f6000000, "_get_adminState", 16);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mDevice_mAdminType
class _0RL_cd_23ebd682546aacbd_07000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_07000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  CF::Device::AdminType arg_0;
};

void _0RL_cd_23ebd682546aacbd_07000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_07000000::unmarshalArguments(cdrStream& _n)
{
  (CF::Device::AdminType&)arg_0 <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_17000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_07000000* tcd = (_0RL_cd_23ebd682546aacbd_07000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  impl->adminState(tcd->arg_0);


}

void CF::_objref_Device::adminState(Device::AdminType _v)
{
  _0RL_cd_23ebd682546aacbd_07000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_17000000, "_set_adminState", 16);
  _call_desc.arg_0 = _v;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDevice_mOperationalType
class _0RL_cd_23ebd682546aacbd_27000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_27000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::Device::OperationalType result;
};

void _0RL_cd_23ebd682546aacbd_27000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_27000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::Device::OperationalType&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_37000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_27000000* tcd = (_0RL_cd_23ebd682546aacbd_27000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  tcd->result = impl->operationalState();


}

CF::Device::OperationalType CF::_objref_Device::operationalState()
{
  _0RL_cd_23ebd682546aacbd_27000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_37000000, "_get_operationalState", 22);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_47000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  tcd->result = impl->softwareProfile();


}

char* CF::_objref_Device::softwareProfile()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_47000000, "_get_softwareProfile", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_57000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  tcd->result = impl->label();


}

char* CF::_objref_Device::label()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_57000000, "_get_label", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mAggregateDevice
class _0RL_cd_23ebd682546aacbd_67000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_67000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::AggregateDevice_var result;
};

void _0RL_cd_23ebd682546aacbd_67000000::marshalReturnedValues(cdrStream& _n)
{
  CF::AggregateDevice::_marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_67000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::AggregateDevice::_unmarshalObjRef(_n);

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_77000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_67000000* tcd = (_0RL_cd_23ebd682546aacbd_67000000*)cd;
  CF::_impl_Device* impl = (CF::_impl_Device*) svnt->_ptrToInterface(CF::Device::_PD_repoId);
  tcd->result = impl->compositeDevice();


}

CF::AggregateDevice_ptr CF::_objref_Device::compositeDevice()
{
  _0RL_cd_23ebd682546aacbd_67000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_77000000, "_get_compositeDevice", 21);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_Device::~_pof_Device() {}


omniObjRef*
CF::_pof_Device::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_Device(ior, id);
}


::CORBA::Boolean
CF::_pof_Device::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::Device::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::Resource::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::LifeCycle::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::TestableObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PortSupplier::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_Device _the_pof_CF_mDevice;

CF::_impl_Device::~_impl_Device() {}


::CORBA::Boolean
CF::_impl_Device::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "allocateCapacity") ) {

    _0RL_cd_23ebd682546aacbd_86000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_96000000, "allocateCapacity", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "deallocateCapacity") ) {

    _0RL_cd_23ebd682546aacbd_a6000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b6000000, "deallocateCapacity", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_usageState") ) {

    _0RL_cd_23ebd682546aacbd_c6000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d6000000, "_get_usageState", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_adminState") ) {

    _0RL_cd_23ebd682546aacbd_e6000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f6000000, "_get_adminState", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_adminState") ) {

    _0RL_cd_23ebd682546aacbd_07000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_17000000, "_set_adminState", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_operationalState") ) {

    _0RL_cd_23ebd682546aacbd_27000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_37000000, "_get_operationalState", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_softwareProfile") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_47000000, "_get_softwareProfile", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_label") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_57000000, "_get_label", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_compositeDevice") ) {

    _0RL_cd_23ebd682546aacbd_67000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_77000000, "_get_compositeDevice", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_Resource::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Resource*)this)->
      _impl_Resource::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_Device::_ptrToInterface(const char* id)
{
  if( id == ::CF::Device::_PD_repoId )
    return (::CF::_impl_Device*) this;
  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::_impl_Resource*) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::_impl_LifeCycle*) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::_impl_TestableObject*) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::Device::_PD_repoId) )
    return (::CF::_impl_Device*) this;
  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::_impl_Resource*) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::_impl_LifeCycle*) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::_impl_TestableObject*) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_Device::_mostDerivedRepoId()
{
  return ::CF::Device::_PD_repoId;
}

void
CF::Application::ComponentProcessIdType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(componentId,0);
  processId >>= _n;

}

void
CF::Application::ComponentProcessIdType::operator<<= (cdrStream &_n)
{
  componentId = _n.unmarshalString(0);
  (::CORBA::ULong&)processId <<= _n;

}

void
CF::Application::ComponentElementType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(componentId,0);
  _n.marshalString(elementId,0);

}

void
CF::Application::ComponentElementType::operator<<= (cdrStream &_n)
{
  componentId = _n.unmarshalString(0);
  elementId = _n.unmarshalString(0);

}

CF::Application_ptr CF::Application_Helper::_nil() {
  return ::CF::Application::_nil();
}

::CORBA::Boolean CF::Application_Helper::is_nil(::CF::Application_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::Application_Helper::release(::CF::Application_ptr p) {
  ::CORBA::release(p);
}

void CF::Application_Helper::marshalObjRef(::CF::Application_ptr obj, cdrStream& s) {
  ::CF::Application::_marshalObjRef(obj, s);
}

CF::Application_ptr CF::Application_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::Application::_unmarshalObjRef(s);
}

void CF::Application_Helper::duplicate(::CF::Application_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::Application_ptr
CF::Application::_duplicate(::CF::Application_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::Application_ptr
CF::Application::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::Application_ptr
CF::Application::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::Application_ptr
CF::Application::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Application _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Application* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Application;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::Application::_PD_repoId = "IDL:CF/Application:1.0";


CF::_objref_Application::~_objref_Application() {
  
}


CF::_objref_Application::_objref_Application(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::Application::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_Resource(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_Application::_ptrToObjRef(const char* id)
{
  if( id == ::CF::Application::_PD_repoId )
    return (::CF::Application_ptr) this;
  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::Resource_ptr) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::LifeCycle_ptr) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::TestableObject_ptr) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::Application::_PD_repoId) )
    return (::CF::Application_ptr) this;
  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::Resource_ptr) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::LifeCycle_ptr) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::TestableObject_ptr) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cCF_mApplication_mComponentElementSequence
class _0RL_cd_23ebd682546aacbd_87000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_87000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::Application::ComponentElementSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_87000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::Application::ComponentElementSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_87000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::Application::ComponentElementSequence;
  (CF::Application::ComponentElementSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_97000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_87000000* tcd = (_0RL_cd_23ebd682546aacbd_87000000*)cd;
  CF::_impl_Application* impl = (CF::_impl_Application*) svnt->_ptrToInterface(CF::Application::_PD_repoId);
  tcd->result = impl->componentNamingContexts();


}

CF::Application::ComponentElementSequence* CF::_objref_Application::componentNamingContexts()
{
  _0RL_cd_23ebd682546aacbd_87000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_97000000, "_get_componentNamingContexts", 29);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mApplication_mComponentProcessIdSequence
class _0RL_cd_23ebd682546aacbd_a7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_a7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::Application::ComponentProcessIdSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_a7000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::Application::ComponentProcessIdSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_a7000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::Application::ComponentProcessIdSequence;
  (CF::Application::ComponentProcessIdSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_b7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_a7000000* tcd = (_0RL_cd_23ebd682546aacbd_a7000000*)cd;
  CF::_impl_Application* impl = (CF::_impl_Application*) svnt->_ptrToInterface(CF::Application::_PD_repoId);
  tcd->result = impl->componentProcessIds();


}

CF::Application::ComponentProcessIdSequence* CF::_objref_Application::componentProcessIds()
{
  _0RL_cd_23ebd682546aacbd_a7000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b7000000, "_get_componentProcessIds", 25);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDeviceAssignmentSequence
class _0RL_cd_23ebd682546aacbd_c7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_c7000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::DeviceAssignmentSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_c7000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::DeviceAssignmentSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_c7000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::DeviceAssignmentSequence;
  (CF::DeviceAssignmentSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_d7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_c7000000* tcd = (_0RL_cd_23ebd682546aacbd_c7000000*)cd;
  CF::_impl_Application* impl = (CF::_impl_Application*) svnt->_ptrToInterface(CF::Application::_PD_repoId);
  tcd->result = impl->componentDevices();


}

CF::DeviceAssignmentSequence* CF::_objref_Application::componentDevices()
{
  _0RL_cd_23ebd682546aacbd_c7000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d7000000, "_get_componentDevices", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_e7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_87000000* tcd = (_0RL_cd_23ebd682546aacbd_87000000*)cd;
  CF::_impl_Application* impl = (CF::_impl_Application*) svnt->_ptrToInterface(CF::Application::_PD_repoId);
  tcd->result = impl->componentImplementations();


}

CF::Application::ComponentElementSequence* CF::_objref_Application::componentImplementations()
{
  _0RL_cd_23ebd682546aacbd_87000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e7000000, "_get_componentImplementations", 30);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_Application* impl = (CF::_impl_Application*) svnt->_ptrToInterface(CF::Application::_PD_repoId);
  tcd->result = impl->profile();


}

char* CF::_objref_Application::profile()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f7000000, "_get_profile", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_08000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_Application* impl = (CF::_impl_Application*) svnt->_ptrToInterface(CF::Application::_PD_repoId);
  tcd->result = impl->name();


}

char* CF::_objref_Application::name()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_08000000, "_get_name", 10);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_Application::~_pof_Application() {}


omniObjRef*
CF::_pof_Application::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_Application(ior, id);
}


::CORBA::Boolean
CF::_pof_Application::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::Application::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::Resource::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::LifeCycle::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::TestableObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PortSupplier::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_Application _the_pof_CF_mApplication;

CF::_impl_Application::~_impl_Application() {}


::CORBA::Boolean
CF::_impl_Application::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "_get_componentNamingContexts") ) {

    _0RL_cd_23ebd682546aacbd_87000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_97000000, "_get_componentNamingContexts", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_componentProcessIds") ) {

    _0RL_cd_23ebd682546aacbd_a7000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_b7000000, "_get_componentProcessIds", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_componentDevices") ) {

    _0RL_cd_23ebd682546aacbd_c7000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_d7000000, "_get_componentDevices", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_componentImplementations") ) {

    _0RL_cd_23ebd682546aacbd_87000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e7000000, "_get_componentImplementations", 30, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_profile") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f7000000, "_get_profile", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_name") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_08000000, "_get_name", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_Resource::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Resource*)this)->
      _impl_Resource::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_Application::_ptrToInterface(const char* id)
{
  if( id == ::CF::Application::_PD_repoId )
    return (::CF::_impl_Application*) this;
  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::_impl_Resource*) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::_impl_LifeCycle*) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::_impl_TestableObject*) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::Application::_PD_repoId) )
    return (::CF::_impl_Application*) this;
  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::_impl_Resource*) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::_impl_LifeCycle*) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::_impl_TestableObject*) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_Application::_mostDerivedRepoId()
{
  return ::CF::Application::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::LoadableDevice::InvalidLoadKind::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::LoadableDevice::InvalidLoadKind::insertToAnyFnNCP = 0;

CF::LoadableDevice::InvalidLoadKind::InvalidLoadKind(const CF::LoadableDevice::InvalidLoadKind& _s) : ::CORBA::UserException(_s)
{
  
}



CF::LoadableDevice::InvalidLoadKind& CF::LoadableDevice::InvalidLoadKind::operator=(const CF::LoadableDevice::InvalidLoadKind& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::LoadableDevice::InvalidLoadKind::~InvalidLoadKind() {}

void CF::LoadableDevice::InvalidLoadKind::_raise() const { throw *this; }

const char* CF::LoadableDevice::InvalidLoadKind::_PD_repoId = "IDL:CF/LoadableDevice/InvalidLoadKind:1.0";
const char* CF::LoadableDevice::InvalidLoadKind::_PD_typeId = "Exception/UserException/CF::LoadableDevice::InvalidLoadKind";

CF::LoadableDevice::InvalidLoadKind* CF::LoadableDevice::InvalidLoadKind::_downcast(::CORBA::Exception* _e) {
  return (InvalidLoadKind*) _NP_is_a(_e, _PD_typeId);
}

const CF::LoadableDevice::InvalidLoadKind* CF::LoadableDevice::InvalidLoadKind::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidLoadKind*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::LoadableDevice::InvalidLoadKind::_NP_duplicate() const {
  return new InvalidLoadKind(*this);
}

const char* CF::LoadableDevice::InvalidLoadKind::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::LoadableDevice::InvalidLoadKind::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/LoadableDevice/InvalidLoadKind:1.0");
  return _PD_repoId;
}
 
void CF::LoadableDevice::InvalidLoadKind::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::LoadableDevice::LoadFail::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::LoadableDevice::LoadFail::insertToAnyFnNCP = 0;

CF::LoadableDevice::LoadFail::LoadFail(const CF::LoadableDevice::LoadFail& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::LoadableDevice::LoadFail::LoadFail(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::LoadableDevice::LoadFail::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::LoadableDevice::LoadFail::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::LoadableDevice::LoadFail& CF::LoadableDevice::LoadFail::operator=(const CF::LoadableDevice::LoadFail& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::LoadableDevice::LoadFail::~LoadFail() {}

void CF::LoadableDevice::LoadFail::_raise() const { throw *this; }

const char* CF::LoadableDevice::LoadFail::_PD_repoId = "IDL:CF/LoadableDevice/LoadFail:1.0";
const char* CF::LoadableDevice::LoadFail::_PD_typeId = "Exception/UserException/CF::LoadableDevice::LoadFail";

CF::LoadableDevice::LoadFail* CF::LoadableDevice::LoadFail::_downcast(::CORBA::Exception* _e) {
  return (LoadFail*) _NP_is_a(_e, _PD_typeId);
}

const CF::LoadableDevice::LoadFail* CF::LoadableDevice::LoadFail::_downcast(const ::CORBA::Exception* _e) {
  return (const LoadFail*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::LoadableDevice::LoadFail::_NP_duplicate() const {
  return new LoadFail(*this);
}

const char* CF::LoadableDevice::LoadFail::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::LoadableDevice::LoadFail::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/LoadableDevice/LoadFail:1.0");
  return _PD_repoId;
}
 
void CF::LoadableDevice::LoadFail::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::LoadableDevice::LoadFail::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::LoadableDevice::LoadFail::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

CF::LoadableDevice_ptr CF::LoadableDevice_Helper::_nil() {
  return ::CF::LoadableDevice::_nil();
}

::CORBA::Boolean CF::LoadableDevice_Helper::is_nil(::CF::LoadableDevice_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::LoadableDevice_Helper::release(::CF::LoadableDevice_ptr p) {
  ::CORBA::release(p);
}

void CF::LoadableDevice_Helper::marshalObjRef(::CF::LoadableDevice_ptr obj, cdrStream& s) {
  ::CF::LoadableDevice::_marshalObjRef(obj, s);
}

CF::LoadableDevice_ptr CF::LoadableDevice_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::LoadableDevice::_unmarshalObjRef(s);
}

void CF::LoadableDevice_Helper::duplicate(::CF::LoadableDevice_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::LoadableDevice_ptr
CF::LoadableDevice::_duplicate(::CF::LoadableDevice_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::LoadableDevice_ptr
CF::LoadableDevice::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::LoadableDevice_ptr
CF::LoadableDevice::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::LoadableDevice_ptr
CF::LoadableDevice::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_LoadableDevice _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_LoadableDevice* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_LoadableDevice;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::LoadableDevice::_PD_repoId = "IDL:CF/LoadableDevice:1.0";


CF::_objref_LoadableDevice::~_objref_LoadableDevice() {
  
}


CF::_objref_LoadableDevice::_objref_LoadableDevice(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::LoadableDevice::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_Device(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_LoadableDevice::_ptrToObjRef(const char* id)
{
  if( id == ::CF::LoadableDevice::_PD_repoId )
    return (::CF::LoadableDevice_ptr) this;
  if( id == ::CF::Device::_PD_repoId )
    return (::CF::Device_ptr) this;

  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::Resource_ptr) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::LifeCycle_ptr) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::TestableObject_ptr) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::LoadableDevice::_PD_repoId) )
    return (::CF::LoadableDevice_ptr) this;
  if( omni::strMatch(id, ::CF::Device::_PD_repoId) )
    return (::CF::Device_ptr) this;

  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::Resource_ptr) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::LifeCycle_ptr) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::TestableObject_ptr) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cCF_mFileSystem_i_cstring_i_cCF_mLoadableDevice_mLoadType_e_cCF_mDevice_mInvalidState_e_cCF_mInvalidFileName_e_cCF_mLoadableDevice_mInvalidLoadKind_e_cCF_mLoadableDevice_mLoadFail
class _0RL_cd_23ebd682546aacbd_18000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_18000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::FileSystem_var arg_0_;
  CF::FileSystem_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  CF::LoadableDevice::LoadType arg_2;
};

void _0RL_cd_23ebd682546aacbd_18000000::marshalArguments(cdrStream& _n)
{
  CF::FileSystem::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);
  arg_2 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_18000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CF::FileSystem::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  (CF::LoadableDevice::LoadType&)arg_2 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_18000000::_user_exns[] = {
  CF::Device::InvalidState::_PD_repoId,
  CF::InvalidFileName::_PD_repoId,
  CF::LoadableDevice::InvalidLoadKind::_PD_repoId,
  CF::LoadableDevice::LoadFail::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_18000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Device::InvalidState::_PD_repoId) ) {
    CF::Device::InvalidState _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::LoadableDevice::InvalidLoadKind::_PD_repoId) ) {
    CF::LoadableDevice::InvalidLoadKind _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::LoadableDevice::LoadFail::_PD_repoId) ) {
    CF::LoadableDevice::LoadFail _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_28000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_18000000* tcd = (_0RL_cd_23ebd682546aacbd_18000000*)cd;
  CF::_impl_LoadableDevice* impl = (CF::_impl_LoadableDevice*) svnt->_ptrToInterface(CF::LoadableDevice::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->load(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    impl->load(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      impl->load(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(CF::Device::InvalidState& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::LoadableDevice::InvalidLoadKind& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::LoadableDevice::LoadFail& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_LoadableDevice::load(FileSystem_ptr fs, const char* fileName, LoadableDevice::LoadType loadKind)
{
  _0RL_cd_23ebd682546aacbd_18000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_28000000, "load", 5);
  _call_desc.arg_0 = fs;
  _call_desc.arg_1 = fileName;
  _call_desc.arg_2 = loadKind;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_e_cCF_mDevice_mInvalidState_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_38000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_38000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_23ebd682546aacbd_38000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_38000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_38000000::_user_exns[] = {
  CF::Device::InvalidState::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_38000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Device::InvalidState::_PD_repoId) ) {
    CF::Device::InvalidState _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_48000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_38000000* tcd = (_0RL_cd_23ebd682546aacbd_38000000*)cd;
  CF::_impl_LoadableDevice* impl = (CF::_impl_LoadableDevice*) svnt->_ptrToInterface(CF::LoadableDevice::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unload(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unload(tcd->arg_0);
  else {
    try {
      impl->unload(tcd->arg_0);
    }
    catch(CF::Device::InvalidState& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_LoadableDevice::unload(const char* fileName)
{
  _0RL_cd_23ebd682546aacbd_38000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_48000000, "unload", 7);
  _call_desc.arg_0 = fileName;

  _invoke(_call_desc);



}
CF::_pof_LoadableDevice::~_pof_LoadableDevice() {}


omniObjRef*
CF::_pof_LoadableDevice::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_LoadableDevice(ior, id);
}


::CORBA::Boolean
CF::_pof_LoadableDevice::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::LoadableDevice::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::Device::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::Resource::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::LifeCycle::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::TestableObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PortSupplier::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_LoadableDevice _the_pof_CF_mLoadableDevice;

CF::_impl_LoadableDevice::~_impl_LoadableDevice() {}


::CORBA::Boolean
CF::_impl_LoadableDevice::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "load") ) {

    _0RL_cd_23ebd682546aacbd_18000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_28000000, "load", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unload") ) {

    _0RL_cd_23ebd682546aacbd_38000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_48000000, "unload", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_Device::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_Device*)this)->
      _impl_Device::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_LoadableDevice::_ptrToInterface(const char* id)
{
  if( id == ::CF::LoadableDevice::_PD_repoId )
    return (::CF::_impl_LoadableDevice*) this;
  if( id == ::CF::Device::_PD_repoId )
    return (::CF::_impl_Device*) this;

  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::_impl_Resource*) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::_impl_LifeCycle*) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::_impl_TestableObject*) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::LoadableDevice::_PD_repoId) )
    return (::CF::_impl_LoadableDevice*) this;
  if( omni::strMatch(id, ::CF::Device::_PD_repoId) )
    return (::CF::_impl_Device*) this;

  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::_impl_Resource*) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::_impl_LifeCycle*) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::_impl_TestableObject*) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_LoadableDevice::_mostDerivedRepoId()
{
  return ::CF::LoadableDevice::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny CF::ExecutableDevice::InvalidProcess::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ExecutableDevice::InvalidProcess::insertToAnyFnNCP = 0;

CF::ExecutableDevice::InvalidProcess::InvalidProcess(const CF::ExecutableDevice::InvalidProcess& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::ExecutableDevice::InvalidProcess::InvalidProcess(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::ExecutableDevice::InvalidProcess::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ExecutableDevice::InvalidProcess::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::ExecutableDevice::InvalidProcess& CF::ExecutableDevice::InvalidProcess::operator=(const CF::ExecutableDevice::InvalidProcess& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::ExecutableDevice::InvalidProcess::~InvalidProcess() {}

void CF::ExecutableDevice::InvalidProcess::_raise() const { throw *this; }

const char* CF::ExecutableDevice::InvalidProcess::_PD_repoId = "IDL:CF/ExecutableDevice/InvalidProcess:1.0";
const char* CF::ExecutableDevice::InvalidProcess::_PD_typeId = "Exception/UserException/CF::ExecutableDevice::InvalidProcess";

CF::ExecutableDevice::InvalidProcess* CF::ExecutableDevice::InvalidProcess::_downcast(::CORBA::Exception* _e) {
  return (InvalidProcess*) _NP_is_a(_e, _PD_typeId);
}

const CF::ExecutableDevice::InvalidProcess* CF::ExecutableDevice::InvalidProcess::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidProcess*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ExecutableDevice::InvalidProcess::_NP_duplicate() const {
  return new InvalidProcess(*this);
}

const char* CF::ExecutableDevice::InvalidProcess::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ExecutableDevice::InvalidProcess::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ExecutableDevice/InvalidProcess:1.0");
  return _PD_repoId;
}
 
void CF::ExecutableDevice::InvalidProcess::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ExecutableDevice::InvalidProcess::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::ExecutableDevice::InvalidProcess::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny CF::ExecutableDevice::InvalidFunction::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ExecutableDevice::InvalidFunction::insertToAnyFnNCP = 0;

CF::ExecutableDevice::InvalidFunction::InvalidFunction(const CF::ExecutableDevice::InvalidFunction& _s) : ::CORBA::UserException(_s)
{
  
}



CF::ExecutableDevice::InvalidFunction& CF::ExecutableDevice::InvalidFunction::operator=(const CF::ExecutableDevice::InvalidFunction& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

CF::ExecutableDevice::InvalidFunction::~InvalidFunction() {}

void CF::ExecutableDevice::InvalidFunction::_raise() const { throw *this; }

const char* CF::ExecutableDevice::InvalidFunction::_PD_repoId = "IDL:CF/ExecutableDevice/InvalidFunction:1.0";
const char* CF::ExecutableDevice::InvalidFunction::_PD_typeId = "Exception/UserException/CF::ExecutableDevice::InvalidFunction";

CF::ExecutableDevice::InvalidFunction* CF::ExecutableDevice::InvalidFunction::_downcast(::CORBA::Exception* _e) {
  return (InvalidFunction*) _NP_is_a(_e, _PD_typeId);
}

const CF::ExecutableDevice::InvalidFunction* CF::ExecutableDevice::InvalidFunction::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidFunction*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ExecutableDevice::InvalidFunction::_NP_duplicate() const {
  return new InvalidFunction(*this);
}

const char* CF::ExecutableDevice::InvalidFunction::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ExecutableDevice::InvalidFunction::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ExecutableDevice/InvalidFunction:1.0");
  return _PD_repoId;
}
 
void CF::ExecutableDevice::InvalidFunction::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny CF::ExecutableDevice::InvalidParameters::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ExecutableDevice::InvalidParameters::insertToAnyFnNCP = 0;

CF::ExecutableDevice::InvalidParameters::InvalidParameters(const CF::ExecutableDevice::InvalidParameters& _s) : ::CORBA::UserException(_s)
{
  invalidParms = _s.invalidParms;

}

CF::ExecutableDevice::InvalidParameters::InvalidParameters(const Properties _invalidParms)
{
  pd_insertToAnyFn    = CF::ExecutableDevice::InvalidParameters::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ExecutableDevice::InvalidParameters::insertToAnyFnNCP;
  invalidParms = _invalidParms;

}



CF::ExecutableDevice::InvalidParameters& CF::ExecutableDevice::InvalidParameters::operator=(const CF::ExecutableDevice::InvalidParameters& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidParms = _s.invalidParms;

  return *this;
}

CF::ExecutableDevice::InvalidParameters::~InvalidParameters() {}

void CF::ExecutableDevice::InvalidParameters::_raise() const { throw *this; }

const char* CF::ExecutableDevice::InvalidParameters::_PD_repoId = "IDL:CF/ExecutableDevice/InvalidParameters:1.0";
const char* CF::ExecutableDevice::InvalidParameters::_PD_typeId = "Exception/UserException/CF::ExecutableDevice::InvalidParameters";

CF::ExecutableDevice::InvalidParameters* CF::ExecutableDevice::InvalidParameters::_downcast(::CORBA::Exception* _e) {
  return (InvalidParameters*) _NP_is_a(_e, _PD_typeId);
}

const CF::ExecutableDevice::InvalidParameters* CF::ExecutableDevice::InvalidParameters::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidParameters*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ExecutableDevice::InvalidParameters::_NP_duplicate() const {
  return new InvalidParameters(*this);
}

const char* CF::ExecutableDevice::InvalidParameters::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ExecutableDevice::InvalidParameters::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ExecutableDevice/InvalidParameters:1.0");
  return _PD_repoId;
}
 
void CF::ExecutableDevice::InvalidParameters::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ExecutableDevice::InvalidParameters::operator>>= (cdrStream& _n) const
{
  (const Properties&) invalidParms >>= _n;

}

void
CF::ExecutableDevice::InvalidParameters::operator<<= (cdrStream& _n)
{
  (Properties&)invalidParms <<= _n;

}

::CORBA::Exception::insertExceptionToAny CF::ExecutableDevice::InvalidOptions::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ExecutableDevice::InvalidOptions::insertToAnyFnNCP = 0;

CF::ExecutableDevice::InvalidOptions::InvalidOptions(const CF::ExecutableDevice::InvalidOptions& _s) : ::CORBA::UserException(_s)
{
  invalidOpts = _s.invalidOpts;

}

CF::ExecutableDevice::InvalidOptions::InvalidOptions(const Properties _invalidOpts)
{
  pd_insertToAnyFn    = CF::ExecutableDevice::InvalidOptions::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ExecutableDevice::InvalidOptions::insertToAnyFnNCP;
  invalidOpts = _invalidOpts;

}



CF::ExecutableDevice::InvalidOptions& CF::ExecutableDevice::InvalidOptions::operator=(const CF::ExecutableDevice::InvalidOptions& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  invalidOpts = _s.invalidOpts;

  return *this;
}

CF::ExecutableDevice::InvalidOptions::~InvalidOptions() {}

void CF::ExecutableDevice::InvalidOptions::_raise() const { throw *this; }

const char* CF::ExecutableDevice::InvalidOptions::_PD_repoId = "IDL:CF/ExecutableDevice/InvalidOptions:1.0";
const char* CF::ExecutableDevice::InvalidOptions::_PD_typeId = "Exception/UserException/CF::ExecutableDevice::InvalidOptions";

CF::ExecutableDevice::InvalidOptions* CF::ExecutableDevice::InvalidOptions::_downcast(::CORBA::Exception* _e) {
  return (InvalidOptions*) _NP_is_a(_e, _PD_typeId);
}

const CF::ExecutableDevice::InvalidOptions* CF::ExecutableDevice::InvalidOptions::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidOptions*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ExecutableDevice::InvalidOptions::_NP_duplicate() const {
  return new InvalidOptions(*this);
}

const char* CF::ExecutableDevice::InvalidOptions::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ExecutableDevice::InvalidOptions::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ExecutableDevice/InvalidOptions:1.0");
  return _PD_repoId;
}
 
void CF::ExecutableDevice::InvalidOptions::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ExecutableDevice::InvalidOptions::operator>>= (cdrStream& _n) const
{
  (const Properties&) invalidOpts >>= _n;

}

void
CF::ExecutableDevice::InvalidOptions::operator<<= (cdrStream& _n)
{
  (Properties&)invalidOpts <<= _n;

}

const char * CF::ExecutableDevice::STACK_SIZE = "STACK_SIZE";

const char * CF::ExecutableDevice::PRIORITY_ID = "PRIORITY";

::CORBA::Exception::insertExceptionToAny CF::ExecutableDevice::ExecuteFail::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP CF::ExecutableDevice::ExecuteFail::insertToAnyFnNCP = 0;

CF::ExecutableDevice::ExecuteFail::ExecuteFail(const CF::ExecutableDevice::ExecuteFail& _s) : ::CORBA::UserException(_s)
{
  errorNumber = _s.errorNumber;
  msg = _s.msg;

}

CF::ExecutableDevice::ExecuteFail::ExecuteFail(ErrorNumberType _errorNumber, const char* _msg)
{
  pd_insertToAnyFn    = CF::ExecutableDevice::ExecuteFail::insertToAnyFn;
  pd_insertToAnyFnNCP = CF::ExecutableDevice::ExecuteFail::insertToAnyFnNCP;
  errorNumber = _errorNumber;
  msg = _msg;

}



CF::ExecutableDevice::ExecuteFail& CF::ExecutableDevice::ExecuteFail::operator=(const CF::ExecutableDevice::ExecuteFail& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorNumber = _s.errorNumber;
  msg = _s.msg;

  return *this;
}

CF::ExecutableDevice::ExecuteFail::~ExecuteFail() {}

void CF::ExecutableDevice::ExecuteFail::_raise() const { throw *this; }

const char* CF::ExecutableDevice::ExecuteFail::_PD_repoId = "IDL:CF/ExecutableDevice/ExecuteFail:1.0";
const char* CF::ExecutableDevice::ExecuteFail::_PD_typeId = "Exception/UserException/CF::ExecutableDevice::ExecuteFail";

CF::ExecutableDevice::ExecuteFail* CF::ExecutableDevice::ExecuteFail::_downcast(::CORBA::Exception* _e) {
  return (ExecuteFail*) _NP_is_a(_e, _PD_typeId);
}

const CF::ExecutableDevice::ExecuteFail* CF::ExecutableDevice::ExecuteFail::_downcast(const ::CORBA::Exception* _e) {
  return (const ExecuteFail*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* CF::ExecutableDevice::ExecuteFail::_NP_duplicate() const {
  return new ExecuteFail(*this);
}

const char* CF::ExecutableDevice::ExecuteFail::_NP_typeId() const {
  return _PD_typeId;
}

const char* CF::ExecutableDevice::ExecuteFail::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:CF/ExecutableDevice/ExecuteFail:1.0");
  return _PD_repoId;
}
 
void CF::ExecutableDevice::ExecuteFail::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
CF::ExecutableDevice::ExecuteFail::operator>>= (cdrStream& _n) const
{
  errorNumber >>= _n;
  _n.marshalString(msg,0);

}

void
CF::ExecutableDevice::ExecuteFail::operator<<= (cdrStream& _n)
{
  (ErrorNumberType&)errorNumber <<= _n;
  msg = _n.unmarshalString(0);

}

CF::ExecutableDevice_ptr CF::ExecutableDevice_Helper::_nil() {
  return ::CF::ExecutableDevice::_nil();
}

::CORBA::Boolean CF::ExecutableDevice_Helper::is_nil(::CF::ExecutableDevice_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::ExecutableDevice_Helper::release(::CF::ExecutableDevice_ptr p) {
  ::CORBA::release(p);
}

void CF::ExecutableDevice_Helper::marshalObjRef(::CF::ExecutableDevice_ptr obj, cdrStream& s) {
  ::CF::ExecutableDevice::_marshalObjRef(obj, s);
}

CF::ExecutableDevice_ptr CF::ExecutableDevice_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::ExecutableDevice::_unmarshalObjRef(s);
}

void CF::ExecutableDevice_Helper::duplicate(::CF::ExecutableDevice_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::ExecutableDevice_ptr
CF::ExecutableDevice::_duplicate(::CF::ExecutableDevice_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::ExecutableDevice_ptr
CF::ExecutableDevice::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::ExecutableDevice_ptr
CF::ExecutableDevice::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::ExecutableDevice_ptr
CF::ExecutableDevice::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ExecutableDevice _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ExecutableDevice* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ExecutableDevice;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::ExecutableDevice::_PD_repoId = "IDL:CF/ExecutableDevice:1.0";


CF::_objref_ExecutableDevice::~_objref_ExecutableDevice() {
  
}


CF::_objref_ExecutableDevice::_objref_ExecutableDevice(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::ExecutableDevice::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_LoadableDevice(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_ExecutableDevice::_ptrToObjRef(const char* id)
{
  if( id == ::CF::ExecutableDevice::_PD_repoId )
    return (::CF::ExecutableDevice_ptr) this;
  if( id == ::CF::LoadableDevice::_PD_repoId )
    return (::CF::LoadableDevice_ptr) this;

  if( id == ::CF::Device::_PD_repoId )
    return (::CF::Device_ptr) this;

  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::Resource_ptr) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::LifeCycle_ptr) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::TestableObject_ptr) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::ExecutableDevice::_PD_repoId) )
    return (::CF::ExecutableDevice_ptr) this;
  if( omni::strMatch(id, ::CF::LoadableDevice::_PD_repoId) )
    return (::CF::LoadableDevice_ptr) this;

  if( omni::strMatch(id, ::CF::Device::_PD_repoId) )
    return (::CF::Device_ptr) this;

  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::Resource_ptr) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::LifeCycle_ptr) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::TestableObject_ptr) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cunsigned_plong_e_cCF_mDevice_mInvalidState_e_cCF_mExecutableDevice_mInvalidProcess
class _0RL_cd_23ebd682546aacbd_58000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_58000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CF::ExecutableDevice::ProcessID_Type arg_0;
};

void _0RL_cd_23ebd682546aacbd_58000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_58000000::unmarshalArguments(cdrStream& _n)
{
  (CF::ExecutableDevice::ProcessID_Type&)arg_0 <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_58000000::_user_exns[] = {
  CF::Device::InvalidState::_PD_repoId,
  CF::ExecutableDevice::InvalidProcess::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_58000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Device::InvalidState::_PD_repoId) ) {
    CF::Device::InvalidState _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ExecutableDevice::InvalidProcess::_PD_repoId) ) {
    CF::ExecutableDevice::InvalidProcess _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_68000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_58000000* tcd = (_0RL_cd_23ebd682546aacbd_58000000*)cd;
  CF::_impl_ExecutableDevice* impl = (CF::_impl_ExecutableDevice*) svnt->_ptrToInterface(CF::ExecutableDevice::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->terminate(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->terminate(tcd->arg_0);
  else {
    try {
      impl->terminate(tcd->arg_0);
    }
    catch(CF::ExecutableDevice::InvalidProcess& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::Device::InvalidState& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_ExecutableDevice::terminate(ExecutableDevice::ProcessID_Type processId)
{
  _0RL_cd_23ebd682546aacbd_58000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_68000000, "terminate", 10);
  _call_desc.arg_0 = processId;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cunsigned_plong_i_cstring_i_cCF_mProperties_i_cCF_mProperties_e_cCF_mDevice_mInvalidState_e_cCF_mExecutableDevice_mExecuteFail_e_cCF_mExecutableDevice_mInvalidFunction_e_cCF_mExecutableDevice_mInvalidOptions_e_cCF_mExecutableDevice_mInvalidParameters_e_cCF_mInvalidFileName
class _0RL_cd_23ebd682546aacbd_78000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_78000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 6, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  CF::Properties_var arg_1_;
  const CF::Properties* arg_1;
  CF::Properties_var arg_2_;
  const CF::Properties* arg_2;
  CF::ExecutableDevice::ProcessID_Type result;
};

void _0RL_cd_23ebd682546aacbd_78000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const CF::Properties&) *arg_1 >>= _n;
  (const CF::Properties&) *arg_2 >>= _n;

}

void _0RL_cd_23ebd682546aacbd_78000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new CF::Properties;
  (CF::Properties&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  arg_2_ = new CF::Properties;
  (CF::Properties&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

void _0RL_cd_23ebd682546aacbd_78000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_78000000::unmarshalReturnedValues(cdrStream& _n)
{
  (CF::ExecutableDevice::ProcessID_Type&)result <<= _n;

}

const char* const _0RL_cd_23ebd682546aacbd_78000000::_user_exns[] = {
  CF::Device::InvalidState::_PD_repoId,
  CF::ExecutableDevice::ExecuteFail::_PD_repoId,
  CF::ExecutableDevice::InvalidFunction::_PD_repoId,
  CF::ExecutableDevice::InvalidOptions::_PD_repoId,
  CF::ExecutableDevice::InvalidParameters::_PD_repoId,
  CF::InvalidFileName::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_78000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::Device::InvalidState::_PD_repoId) ) {
    CF::Device::InvalidState _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ExecutableDevice::ExecuteFail::_PD_repoId) ) {
    CF::ExecutableDevice::ExecuteFail _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ExecutableDevice::InvalidFunction::_PD_repoId) ) {
    CF::ExecutableDevice::InvalidFunction _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ExecutableDevice::InvalidOptions::_PD_repoId) ) {
    CF::ExecutableDevice::InvalidOptions _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::ExecutableDevice::InvalidParameters::_PD_repoId) ) {
    CF::ExecutableDevice::InvalidParameters _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, CF::InvalidFileName::_PD_repoId) ) {
    CF::InvalidFileName _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_88000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_78000000* tcd = (_0RL_cd_23ebd682546aacbd_78000000*)cd;
  CF::_impl_ExecutableDevice* impl = (CF::_impl_ExecutableDevice*) svnt->_ptrToInterface(CF::ExecutableDevice::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->execute(tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->execute(tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
  else {
    try {
      tcd->result = impl->execute(tcd->arg_0, *tcd->arg_1, *tcd->arg_2);
    }
    catch(CF::Device::InvalidState& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::ExecutableDevice::InvalidFunction& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::ExecutableDevice::InvalidParameters& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::ExecutableDevice::InvalidOptions& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::InvalidFileName& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(CF::ExecutableDevice::ExecuteFail& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

CF::ExecutableDevice::ProcessID_Type CF::_objref_ExecutableDevice::execute(const char* name, const Properties& options, const Properties& parameters)
{
  _0RL_cd_23ebd682546aacbd_78000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_88000000, "execute", 8);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(Properties&) options;
  _call_desc.arg_2 = &(Properties&) parameters;

  _invoke(_call_desc);
  return _call_desc.result;


}
CF::_pof_ExecutableDevice::~_pof_ExecutableDevice() {}


omniObjRef*
CF::_pof_ExecutableDevice::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_ExecutableDevice(ior, id);
}


::CORBA::Boolean
CF::_pof_ExecutableDevice::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::ExecutableDevice::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::LoadableDevice::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::Device::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::Resource::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::LifeCycle::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::TestableObject::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PortSupplier::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_ExecutableDevice _the_pof_CF_mExecutableDevice;

CF::_impl_ExecutableDevice::~_impl_ExecutableDevice() {}


::CORBA::Boolean
CF::_impl_ExecutableDevice::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "terminate") ) {

    _0RL_cd_23ebd682546aacbd_58000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_68000000, "terminate", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "execute") ) {

    _0RL_cd_23ebd682546aacbd_78000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_88000000, "execute", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_LoadableDevice::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_LoadableDevice*)this)->
      _impl_LoadableDevice::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_ExecutableDevice::_ptrToInterface(const char* id)
{
  if( id == ::CF::ExecutableDevice::_PD_repoId )
    return (::CF::_impl_ExecutableDevice*) this;
  if( id == ::CF::LoadableDevice::_PD_repoId )
    return (::CF::_impl_LoadableDevice*) this;

  if( id == ::CF::Device::_PD_repoId )
    return (::CF::_impl_Device*) this;

  if( id == ::CF::Resource::_PD_repoId )
    return (::CF::_impl_Resource*) this;

  if( id == ::CF::LifeCycle::_PD_repoId )
    return (::CF::_impl_LifeCycle*) this;

  if( id == ::CF::TestableObject::_PD_repoId )
    return (::CF::_impl_TestableObject*) this;

  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::ExecutableDevice::_PD_repoId) )
    return (::CF::_impl_ExecutableDevice*) this;
  if( omni::strMatch(id, ::CF::LoadableDevice::_PD_repoId) )
    return (::CF::_impl_LoadableDevice*) this;

  if( omni::strMatch(id, ::CF::Device::_PD_repoId) )
    return (::CF::_impl_Device*) this;

  if( omni::strMatch(id, ::CF::Resource::_PD_repoId) )
    return (::CF::_impl_Resource*) this;

  if( omni::strMatch(id, ::CF::LifeCycle::_PD_repoId) )
    return (::CF::_impl_LifeCycle*) this;

  if( omni::strMatch(id, ::CF::TestableObject::_PD_repoId) )
    return (::CF::_impl_TestableObject*) this;

  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_ExecutableDevice::_mostDerivedRepoId()
{
  return ::CF::ExecutableDevice::_PD_repoId;
}

void
CF::DeviceManager::ServiceType::operator>>= (cdrStream &_n) const
{
  ::CORBA::Object::_marshalObjRef(serviceObject,_n);
  _n.marshalString(serviceName,0);

}

void
CF::DeviceManager::ServiceType::operator<<= (cdrStream &_n)
{
  serviceObject = ::CORBA::Object::_unmarshalObjRef(_n);
  serviceName = _n.unmarshalString(0);

}

CF::DeviceManager_ptr CF::DeviceManager_Helper::_nil() {
  return ::CF::DeviceManager::_nil();
}

::CORBA::Boolean CF::DeviceManager_Helper::is_nil(::CF::DeviceManager_ptr p) {
  return ::CORBA::is_nil(p);

}

void CF::DeviceManager_Helper::release(::CF::DeviceManager_ptr p) {
  ::CORBA::release(p);
}

void CF::DeviceManager_Helper::marshalObjRef(::CF::DeviceManager_ptr obj, cdrStream& s) {
  ::CF::DeviceManager::_marshalObjRef(obj, s);
}

CF::DeviceManager_ptr CF::DeviceManager_Helper::unmarshalObjRef(cdrStream& s) {
  return ::CF::DeviceManager::_unmarshalObjRef(s);
}

void CF::DeviceManager_Helper::duplicate(::CF::DeviceManager_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

CF::DeviceManager_ptr
CF::DeviceManager::_duplicate(::CF::DeviceManager_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

CF::DeviceManager_ptr
CF::DeviceManager::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


CF::DeviceManager_ptr
CF::DeviceManager::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

CF::DeviceManager_ptr
CF::DeviceManager::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DeviceManager _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DeviceManager* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DeviceManager;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* CF::DeviceManager::_PD_repoId = "IDL:CF/DeviceManager:1.0";


CF::_objref_DeviceManager::~_objref_DeviceManager() {
  
}


CF::_objref_DeviceManager::_objref_DeviceManager(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::CF::DeviceManager::_PD_repoId, ior, id, 1),
   OMNIORB_BASE_CTOR(CF::)_objref_PropertySet(ior, id),
   OMNIORB_BASE_CTOR(CF::)_objref_PortSupplier(ior, id)
   
{
  _PR_setobj(this);
}

void*
CF::_objref_DeviceManager::_ptrToObjRef(const char* id)
{
  if( id == ::CF::DeviceManager::_PD_repoId )
    return (::CF::DeviceManager_ptr) this;
  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::PropertySet_ptr) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::PortSupplier_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::CF::DeviceManager::_PD_repoId) )
    return (::CF::DeviceManager_ptr) this;
  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::PropertySet_ptr) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::PortSupplier_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_98000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_00000000* tcd = (_0RL_cd_23ebd682546aacbd_00000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->registerDevice(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->registerDevice(tcd->arg_0);
  else {
    try {
      impl->registerDevice(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DeviceManager::registerDevice(Device_ptr registeringDevice)
{
  _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_98000000, "registerDevice", 15);
  _call_desc.arg_0 = registeringDevice;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_a8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_00000000* tcd = (_0RL_cd_23ebd682546aacbd_00000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterDevice(tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->unregisterDevice(tcd->arg_0);
  else {
    try {
      impl->unregisterDevice(tcd->arg_0);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DeviceManager::unregisterDevice(Device_ptr registeredDevice)
{
  _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a8000000, "unregisterDevice", 17);
  _call_desc.arg_0 = registeredDevice;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_23ebd682546aacbd_b8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_b8000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
    
  
  
};

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_c8000000(omniCallDescriptor*, omniServant* svnt)
{
  
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  impl->shutdown();


}

void CF::_objref_DeviceManager::shutdown()
{
  _0RL_cd_23ebd682546aacbd_b8000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_c8000000, "shutdown", 9);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cCORBA_mObject_i_cstring_e_cCF_mInvalidObjectReference
class _0RL_cd_23ebd682546aacbd_d8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_d8000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  CORBA::Object_var arg_0_;
  CORBA::Object_ptr arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_23ebd682546aacbd_d8000000::marshalArguments(cdrStream& _n)
{
  CORBA::Object::_marshalObjRef(arg_0,_n);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_23ebd682546aacbd_d8000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = CORBA::Object::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_23ebd682546aacbd_d8000000::_user_exns[] = {
  CF::InvalidObjectReference::_PD_repoId
};

void _0RL_cd_23ebd682546aacbd_d8000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, CF::InvalidObjectReference::_PD_repoId) ) {
    CF::InvalidObjectReference _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_e8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_d8000000* tcd = (_0RL_cd_23ebd682546aacbd_d8000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->registerService(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->registerService(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->registerService(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DeviceManager::registerService(::CORBA::Object_ptr registeringService, const char* name)
{
  _0RL_cd_23ebd682546aacbd_d8000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e8000000, "registerService", 16);
  _call_desc.arg_0 = registeringService;
  _call_desc.arg_1 = name;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_f8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_d8000000* tcd = (_0RL_cd_23ebd682546aacbd_d8000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->unregisterService(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->unregisterService(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->unregisterService(tcd->arg_0, tcd->arg_1);
    }
    catch(CF::InvalidObjectReference& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void CF::_objref_DeviceManager::unregisterService(::CORBA::Object_ptr registeredService, const char* name)
{
  _0RL_cd_23ebd682546aacbd_d8000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f8000000, "unregisterService", 18);
  _call_desc.arg_0 = registeredService;
  _call_desc.arg_1 = name;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_23ebd682546aacbd_09000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_09000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_23ebd682546aacbd_09000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_23ebd682546aacbd_09000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_23ebd682546aacbd_09000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_23ebd682546aacbd_09000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_19000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_09000000* tcd = (_0RL_cd_23ebd682546aacbd_09000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->getComponentImplementationId(tcd->arg_0);


}

char* CF::_objref_DeviceManager::getComponentImplementationId(const char* componentInstantiationId)
{
  _0RL_cd_23ebd682546aacbd_09000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_19000000, "getComponentImplementationId", 29);
  _call_desc.arg_0 = componentInstantiationId;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_29000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->deviceConfigurationProfile();


}

char* CF::_objref_DeviceManager::deviceConfigurationProfile()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_29000000, "_get_deviceConfigurationProfile", 32);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mFileSystem
class _0RL_cd_23ebd682546aacbd_39000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_39000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::FileSystem_var result;
};

void _0RL_cd_23ebd682546aacbd_39000000::marshalReturnedValues(cdrStream& _n)
{
  CF::FileSystem::_marshalObjRef(result,_n);

}

void _0RL_cd_23ebd682546aacbd_39000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = CF::FileSystem::_unmarshalObjRef(_n);

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_49000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_39000000* tcd = (_0RL_cd_23ebd682546aacbd_39000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->fileSys();


}

CF::FileSystem_ptr CF::_objref_DeviceManager::fileSys()
{
  _0RL_cd_23ebd682546aacbd_39000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_49000000, "_get_fileSys", 13);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_59000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->identifier();


}

char* CF::_objref_DeviceManager::identifier()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_59000000, "_get_identifier", 16);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_69000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_f1000000* tcd = (_0RL_cd_23ebd682546aacbd_f1000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->label();


}

char* CF::_objref_DeviceManager::label()
{
  _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_69000000, "_get_label", 11);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_79000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_30000000* tcd = (_0RL_cd_23ebd682546aacbd_30000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->registeredDevices();


}

CF::DeviceSequence* CF::_objref_DeviceManager::registeredDevices()
{
  _0RL_cd_23ebd682546aacbd_30000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_79000000, "_get_registeredDevices", 23);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cCF_mDeviceManager_mServiceSequence
class _0RL_cd_23ebd682546aacbd_89000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_23ebd682546aacbd_89000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, 0, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  CF::DeviceManager::ServiceSequence_var result;
};

void _0RL_cd_23ebd682546aacbd_89000000::marshalReturnedValues(cdrStream& _n)
{
  (const CF::DeviceManager::ServiceSequence&) result >>= _n;

}

void _0RL_cd_23ebd682546aacbd_89000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new CF::DeviceManager::ServiceSequence;
  (CF::DeviceManager::ServiceSequence&)result <<= _n;

}

// Local call call-back function.
static void
_0RL_lcfn_23ebd682546aacbd_99000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_23ebd682546aacbd_89000000* tcd = (_0RL_cd_23ebd682546aacbd_89000000*)cd;
  CF::_impl_DeviceManager* impl = (CF::_impl_DeviceManager*) svnt->_ptrToInterface(CF::DeviceManager::_PD_repoId);
  tcd->result = impl->registeredServices();


}

CF::DeviceManager::ServiceSequence* CF::_objref_DeviceManager::registeredServices()
{
  _0RL_cd_23ebd682546aacbd_89000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_99000000, "_get_registeredServices", 24);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
CF::_pof_DeviceManager::~_pof_DeviceManager() {}


omniObjRef*
CF::_pof_DeviceManager::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::CF::_objref_DeviceManager(ior, id);
}


::CORBA::Boolean
CF::_pof_DeviceManager::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::CF::DeviceManager::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, CF::PropertySet::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, CF::PortSupplier::_PD_repoId) )
    return 1;


  return 0;
}

const CF::_pof_DeviceManager _the_pof_CF_mDeviceManager;

CF::_impl_DeviceManager::~_impl_DeviceManager() {}


::CORBA::Boolean
CF::_impl_DeviceManager::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "registerDevice") ) {

    _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_98000000, "registerDevice", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterDevice") ) {

    _0RL_cd_23ebd682546aacbd_00000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_a8000000, "unregisterDevice", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "shutdown") ) {

    _0RL_cd_23ebd682546aacbd_b8000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_c8000000, "shutdown", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "registerService") ) {

    _0RL_cd_23ebd682546aacbd_d8000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_e8000000, "registerService", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "unregisterService") ) {

    _0RL_cd_23ebd682546aacbd_d8000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_f8000000, "unregisterService", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getComponentImplementationId") ) {

    _0RL_cd_23ebd682546aacbd_09000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_19000000, "getComponentImplementationId", 29, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_deviceConfigurationProfile") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_29000000, "_get_deviceConfigurationProfile", 32, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_fileSys") ) {

    _0RL_cd_23ebd682546aacbd_39000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_49000000, "_get_fileSys", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_identifier") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_59000000, "_get_identifier", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_label") ) {

    _0RL_cd_23ebd682546aacbd_f1000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_69000000, "_get_label", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_registeredDevices") ) {

    _0RL_cd_23ebd682546aacbd_30000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_79000000, "_get_registeredDevices", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_registeredServices") ) {

    _0RL_cd_23ebd682546aacbd_89000000 _call_desc(_0RL_lcfn_23ebd682546aacbd_99000000, "_get_registeredServices", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_PropertySet::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_PropertySet*)this)->
      _impl_PropertySet::_dispatch(_handle) ) {
    return 1;
  }
#endif

  
#ifndef _MSC_VER
  if( _impl_PortSupplier::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_PortSupplier*)this)->
      _impl_PortSupplier::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
CF::_impl_DeviceManager::_ptrToInterface(const char* id)
{
  if( id == ::CF::DeviceManager::_PD_repoId )
    return (::CF::_impl_DeviceManager*) this;
  if( id == ::CF::PropertySet::_PD_repoId )
    return (::CF::_impl_PropertySet*) this;

  if( id == ::CF::PortSupplier::_PD_repoId )
    return (::CF::_impl_PortSupplier*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::CF::DeviceManager::_PD_repoId) )
    return (::CF::_impl_DeviceManager*) this;
  if( omni::strMatch(id, ::CF::PropertySet::_PD_repoId) )
    return (::CF::_impl_PropertySet*) this;

  if( omni::strMatch(id, ::CF::PortSupplier::_PD_repoId) )
    return (::CF::_impl_PortSupplier*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
CF::_impl_DeviceManager::_mostDerivedRepoId()
{
  return ::CF::DeviceManager::_PD_repoId;
}

POA_CF::AggregateDevice::~AggregateDevice() {}

POA_CF::FileSystem::~FileSystem() {}

POA_CF::File::~File() {}

POA_CF::ResourceFactory::~ResourceFactory() {}

POA_CF::FileManager::~FileManager() {}

POA_CF::Port::~Port() {}

POA_CF::LifeCycle::~LifeCycle() {}

POA_CF::TestableObject::~TestableObject() {}

POA_CF::PropertySet::~PropertySet() {}

POA_CF::DomainManager::~DomainManager() {}

POA_CF::ApplicationFactory::~ApplicationFactory() {}

POA_CF::PortSupplier::~PortSupplier() {}

POA_CF::Resource::~Resource() {}

POA_CF::Device::~Device() {}

POA_CF::Application::~Application() {}

POA_CF::LoadableDevice::~LoadableDevice() {}

POA_CF::ExecutableDevice::~ExecutableDevice() {}

POA_CF::DeviceManager::~DeviceManager() {}

